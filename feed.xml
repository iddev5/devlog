<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="4.2.0">Jekyll</generator>
  
  
  <link href="/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2022-01-17T07:10:13+00:00</updated>
  <id>//</id>

  
    <title type="html">Hexops’ devlog</title>
  

  
    <subtitle>Hexops' developer log</subtitle>
  

  

  
  
    <entry>
      
      <title type="html">Let’s build an Entity Component System from scratch (part 1)</title>
      
      
      <link href="/2022/lets-build-ecs-part-1" rel="alternate" type="text/html" title="Let's build an Entity Component System from scratch (part 1)" />
      
      <published>2022-01-16T00:00:00+00:00</published>
      <updated>2022-01-16T00:00:00+00:00</updated>
      <id>/2022/lets-build-ecs-part-1</id>
      <content type="html" xml:base="/2022/lets-build-ecs-part-1">&lt;p&gt;In this multi-part series we’ll build the Entity Component System used in &lt;a href=&quot;https://hexops.com/mach&quot;&gt;Mach engine&lt;/a&gt; in &lt;a href=&quot;https://ziglang.org&quot;&gt;the Zig programming language&lt;/a&gt; from first principles (asking what an ECS is and walking through what problems it solves) all the way to writing an implementation in a low-level programming language. The only thing you need to follow along is some programming experience and a desire to learn.&lt;/p&gt;

&lt;p&gt;In this article, we’ll mostly go over the problem space, data oriented design, the things we need our ECS to solve, etc. In the next article, implementation will begin.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#my-approach-to-complex-software-architecture&quot;&gt;My approach to complex software architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-really-is-an-entity-component-system-anyway&quot;&gt;What really is an entity component system, anyway?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-problems-does-an-ecs-solve&quot;&gt;What problems does an ECS solve?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#start-with-data-oriented-design&quot;&gt;Start with data oriented design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-would-data-oriented-design-look-like-code-starts-here&quot;&gt;What would data oriented design look like? (code starts here!)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sparse-data-storage&quot;&gt;Sparse data storage&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#comptime-sparse-data&quot;&gt;Comptime sparse data&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#runtime-sparse-data&quot;&gt;Runtime sparse data&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#avoiding-unity-software-patents--improving-performance-while-doing-it&quot;&gt;Avoiding Unity software patents &amp;amp; improving performance while doing it&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#archetype-storage&quot;&gt;Archetype storage&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#comptime-archetype-storage&quot;&gt;Comptime archetype storage&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#runtime-archetype-storage&quot;&gt;Runtime archetype storage&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#designing-our-ecs&quot;&gt;Designing our ECS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#next-up-starting-our-ecs-implementation&quot;&gt;Next up: starting our ECS implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/149648955-ab99ff6f-79e6-4b03-9ca2-3f31fb000203.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/149648955-ab99ff6f-79e6-4b03-9ca2-3f31fb000203.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve used and written more traditional &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;OOP&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Scene_graph&quot;&gt;scene graphs&lt;/a&gt; in the past. These are often the core engine architecture used to represent everything in game worlds: they’re used in Unity historically (which is now migrating to ECS due to popular demand) and even &lt;a href=&quot;https://godotengine.org/article/why-isnt-godot-ecs-based-game-engine&quot;&gt;in other modern engines such as Godot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;https://hexops.com/mach&quot;&gt;Mach engine&lt;/a&gt;, however, we’re adopting an ECS as our core architecture. ECS has gained great momentum in recent years for its composition and performance benefits.&lt;/p&gt;

&lt;h2 id=&quot;my-approach-to-complex-software-architecture&quot;&gt;My approach to complex software architecture&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;What user problems does the proposed architecture (scene graphs, ECS, React-like frameworks, etc.) solve?&lt;/li&gt;
  &lt;li&gt;How does the proposed architecture &lt;em&gt;typically&lt;/em&gt; solve such problems?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The key point here is that, personally, I find it useful to intentionally avoid looking directly at code for the implementations themselves.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/149651958-a9c1d50e-77be-4098-ae91-4ed14dd95794.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/149651958-a9c1d50e-77be-4098-ae91-4ed14dd95794.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve used this approach to &lt;a href=&quot;https://github.com/hexops/vecty&quot;&gt;to great success before&lt;/a&gt;: the nice thing about this is that the end result really &lt;em&gt;fits the language&lt;/em&gt;, using patterns and features specific to the language - it doesn’t just end up feeling like a port of some other language’s implementation.&lt;/p&gt;

&lt;p&gt;I’ve researched a bit about ECS in general, and have chatted with people familiar with ECS, but haven’t read any other’s code. No doubt, initially, I’ll get some aspects wrong! As this series of articles progresses over the coming months, though, you’ll see how this can be a winning tactic as we learn together!&lt;/p&gt;

&lt;h2 id=&quot;what-really-is-an-entity-component-system-anyway&quot;&gt;What really is an entity component system, anyway?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/149679322-f17012b1-4aed-484e-a27e-4b7823354912.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/149679322-f17012b1-4aed-484e-a27e-4b7823354912.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve found the Rust project &lt;a href=&quot;https://bevyengine.org/learn/book/getting-started/ecs/#bevy-ecs&quot;&gt;Bevy ECS to have a great succinct explanation&lt;/a&gt;, which I further simplify here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Entities&lt;/strong&gt;: a unique integer&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt;: structs of plain old data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Systems&lt;/strong&gt;: normal functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you hear this, things may start to sounds a whole lot simpler! Those are the core concepts of an ECS.&lt;/p&gt;

&lt;p&gt;There is one other concept of an ECS that I think is particularly important:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Archetype&lt;/strong&gt;: A &lt;em&gt;chosen set of components&lt;/em&gt; that an entity of a certain type will have.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/149679390-e0a680f4-3299-4f96-b5b0-2165f390dbfb.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/149679390-e0a680f4-3299-4f96-b5b0-2165f390dbfb.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-problems-does-an-ecs-solve&quot;&gt;What problems does an ECS solve?&lt;/h2&gt;

&lt;p&gt;I’ve identified two problems it solves.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/149681141-eeed2594-fa40-46b7-8327-ca2a6143d98f.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/149681141-eeed2594-fa40-46b7-8327-ca2a6143d98f.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First and foremost is &lt;em&gt;making it easy for game developers to architect their code&lt;/em&gt; compared to them doing it manually. If it’s easier for someone to structure their code themselves, manually, then such a system is not useful at all! Of course, as complexity and the scale of software increases then a &lt;em&gt;consistent&lt;/em&gt; system is &lt;em&gt;far more useful&lt;/em&gt; than a bunch of ad-hoc systems.&lt;/p&gt;

&lt;p&gt;The second problem ECS solves, I believe, is making your software architecture &lt;em&gt;efficient&lt;/em&gt; without you really having to think too much about it. You don’t have to think about how to structure all your code &amp;amp; data for logic first, &lt;em&gt;and then for performance&lt;/em&gt;, but rather get good performance by nature of following patterns.&lt;/p&gt;

&lt;h2 id=&quot;start-with-data-oriented-design&quot;&gt;Start with data oriented design&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/149683974-e33f05b9-c1ad-46e1-9634-7996f39e18b8.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/149683974-e33f05b9-c1ad-46e1-9634-7996f39e18b8.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ECS overlaps with &lt;a href=&quot;https://dataorienteddesign.com/site.php&quot;&gt;&lt;em&gt;data oriented design&lt;/em&gt;&lt;/a&gt; in many ways (although it’s &lt;a href=&quot;https://github.com/hexops/mach/issues/127#issuecomment-1014176503&quot;&gt;roots are &lt;em&gt;much&lt;/em&gt; earlier&lt;/a&gt;). There are many talks about data oriented design including &lt;a href=&quot;https://www.youtube.com/watch?v=rX0ItVEVjHc&quot;&gt;Mike Acton’s at CppCon&lt;/a&gt;, and my personal favorite &lt;a href=&quot;https://media.handmade-seattle.com/practical-data-oriented-design/&quot;&gt;“A Practical Guide to Applying Data-Oriented Design”&lt;/a&gt; by Andrew Kelley. You don’t have to watch either, I’ll cover the important concepts we use here. But I highly suggest &lt;strong&gt;every&lt;/strong&gt; developer watch Andrew Kelley’s talk above. It’s eye opening no matter what kind of programming you are doing.&lt;/p&gt;

&lt;p&gt;Let’s work forwards, not backwards: We’re not starting by building an ECS, we’re starting by building a proper data oriented design for CPU cache and memory efficiency, and then we’re working towards “how do we make that easier for people to do by default?” and looking to existing ECS architectures for inspiration.&lt;/p&gt;

&lt;h2 id=&quot;what-would-data-oriented-design-look-like-code-starts-here&quot;&gt;What would data oriented design look like? (code starts here!)&lt;/h2&gt;

&lt;p&gt;A simple first approach would be something like this:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// a string / byte slice&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;velocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// a string / byte slice&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Monster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// All the players, cats, monsters in our game world.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monsters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// The index of a player in the players array, a cat in the cats array, etc.!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can refer to players, cats, or monsters by using an entity ID (their index in the array), which we call an &lt;em&gt;entity&lt;/em&gt;. We could also write functions (called systems) which iterate over these arrays and e.g. compute physics for players.&lt;/p&gt;

&lt;p&gt;However, we can improve this quite a bit!&lt;/p&gt;

&lt;h2 id=&quot;sparse-data-storage&quot;&gt;Sparse data storage&lt;/h2&gt;

&lt;h3 id=&quot;comptime-sparse-data&quot;&gt;Comptime sparse data&lt;/h3&gt;

&lt;p&gt;It’s likely that most players will be alive in our game, only a few will be dead at a time - but yet we’re paying the cost of storing which players are dead for &lt;em&gt;every living player&lt;/em&gt; (via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Player.alive&lt;/code&gt; struct field)!&lt;/p&gt;

&lt;p&gt;We can eliminate paying the cost of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alive: bool&lt;/code&gt; per player by removing the field entirely, and having what I call &lt;em&gt;compile time sparse data&lt;/em&gt; instead:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alive_players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dead_players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This not only reduces the amount of memory each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Player&lt;/code&gt; entity takes up because we no longer store an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alive: bool&lt;/code&gt; per player, but also it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Improves performance by ensuring more players fit into L1/L2/L3 cache.&lt;/li&gt;
  &lt;li&gt;Reduces the amount of players we must skip (and reduces potential cache misses) because in some cases we might only be interested in alive players and have to skip over dead ones when iterating.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This introduces some complexity for us to deal with, though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now if a player goes from dead-&amp;gt;alive, or alive-&amp;gt;dead, we need logic to remove it from the old array and put it in the new one.&lt;/li&gt;
  &lt;li&gt;When we move a player from one array to another, the Entity ID we use to refer to that player (the array index) has changed! So if someone is storing a player Entity ID in order to have reference to it somewhere, we’d need to have logic to update that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we start to see one thing our ECS needs to make simpler!&lt;/p&gt;

&lt;p&gt;I call this type of data &lt;em&gt;comptime sparse data&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;runtime-sparse-data&quot;&gt;Runtime sparse data&lt;/h3&gt;

&lt;p&gt;In an ideal world, we’re able to pre-declare all sparse data at compile time like we did above:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alive_players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dead_players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But sometimes, this just isn’t possible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Maybe players in your game can give other players a customer nickname to display above their head. Again, for most players this won’t be set - but for some players it will be! Ideally we don’t have to pay the cost of storing a nickname string pointer for every player in the game without one&lt;/li&gt;
  &lt;li&gt;Maybe a handful of players out of thousands are given the speciality of having a custom weapon, they get to choose it’s type, a custom name for it, and even the damage it should do! Where should we store that information?&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, we could use a hash map:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlayerNickname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// a string&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weapon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;custom_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// a string&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeaponType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// all players&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;players_with_nicknames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AutoHashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlayerNickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;players_with_weapons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AutoHashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’ve got a mapping of player Entity IDs -&amp;gt; their nicknames and weapons. We only pay the cost of storing this information for players that do actually have these specialties - not for every player.&lt;/p&gt;

&lt;p&gt;I call this type of data &lt;em&gt;runtime sparse data&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;avoiding-unity-software-patents--improving-performance-while-doing-it&quot;&gt;Avoiding Unity software patents &amp;amp; improving performance while doing it&lt;/h3&gt;

&lt;p&gt;Consider our player storage as it stands right now:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// a string / byte slice&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;velocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// all players&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a perfect world, software patents wouldn’t exist. But, in our world, however, Unity makes 20 claims in their software patent covering ECS, including all code we’ve written above to this point. Luckily, &lt;a href=&quot;https://www.reddit.com/r/rust/comments/pjtpkj/unity_files_patent_for_ecs_in_game_engines_that/hbzaz61/&quot;&gt;as the Bevy authors suggest here&lt;/a&gt; entity component systems which store components in separate arrays are not affected by this (this is not legal advice)&lt;/p&gt;

&lt;p&gt;Additionally, because of the way structs get laid out in memory with padding, our players array above would end up having a larger memory footprint than needed. So we actually benefit from using a separate array for every type of data (thanks, Unity!):&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player_locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player_velocities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player_healths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player_teams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Luckily, we don’t actually have to enumerate all our fields out like this: Zig has a nice &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MultiArrayList&lt;/code&gt; type which does this for us, we need change only one line:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;const Player = struct {
&lt;/span&gt;    name: []const u8, // a string / byte slice
    location: Vec3,
    velocity: Vec3,
    health: u8,
    team: Team,
&lt;span class=&quot;err&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;gd&quot;&gt;-var players: ArrayList(Player) = .{}; // all players
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+var players: MultiArrayList(Player) = .{}; // all players
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not only does this use less memory, it also improves CPU cache efficiency a ton, especially when iterating over a lot of players to do work with them. If you’re curious why, then you should watch Andrew Kelley’s &lt;a href=&quot;https://media.handmade-seattle.com/practical-data-oriented-design/&quot;&gt;“A Practical Guide to Applying Data-Oriented Design”&lt;/a&gt; talk!&lt;/p&gt;

&lt;h2 id=&quot;archetype-storage&quot;&gt;Archetype storage&lt;/h2&gt;

&lt;h3 id=&quot;comptime-archetype-storage&quot;&gt;Comptime archetype storage&lt;/h3&gt;

&lt;p&gt;Up until now, we’ve assumed we have pre-defined archetypes (“player”, “cat”, “monster”):&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// All the players, cats, monsters in our game world.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monsters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is ideal: we don’t need to ask the computer to do any work to find out where players, cats, or monsters are stored - we just &lt;em&gt;know at compile time&lt;/em&gt; because &lt;em&gt;they’re in that variable&lt;/em&gt;. When someone uses our ECS, we could have them write a compile time function like:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s great because it means our ECS “world” can be aware ahead of time exactly which archetypes it needs to store. It could write out those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var players: ArrayList...&lt;/code&gt; variables for us.&lt;/p&gt;

&lt;p&gt;I call this &lt;em&gt;comptime archetype storage&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;runtime-archetype-storage&quot;&gt;Runtime archetype storage&lt;/h3&gt;

&lt;p&gt;However, real games are much more complex: we might not really know at the time we’re declaring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;World&lt;/code&gt; all the different archetypes we plan on storing. Code gets messy. In some cases, maybe we even need to define some archetypes &lt;em&gt;of a common type&lt;/em&gt; at runtime. For example, if we wanted to allow configuring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;red&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blue&lt;/code&gt; here (or the number of teams) via a configuration file on disk or via a GUI:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red_team_players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue_team_players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Player&lt;/code&gt; could have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;team&lt;/code&gt; field in it to represent the team, but there may be cases where storing &lt;em&gt;a separate list of entities&lt;/em&gt; like this is needed without pre-declaring it. If we want to do that, we could use a hashmap:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_archetypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AutoHashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anyopaque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this model, we could store the &lt;em&gt;archtype string name&lt;/em&gt; as the hashmap key (for example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@typeName(Player)&lt;/code&gt; if we wanted, or maybe a custom name like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;red&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blue&lt;/code&gt;, etc.). The value of the hashmap would need to be different types: an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrayList(Player)&lt;/code&gt;, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrayList(Monster)&lt;/code&gt;, etc. and so we would store a type-erased &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*anyopaque&lt;/code&gt; (like a C &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void*&lt;/code&gt;) pointer. When we get a value out, we’ll need to “know” what type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; to cast the pointer back to. It won’t store that info for us.&lt;/p&gt;

&lt;p&gt;I call this &lt;em&gt;runtime archetype storage&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;designing-our-ecs&quot;&gt;Designing our ECS&lt;/h2&gt;

&lt;p&gt;We now start to see &lt;em&gt;some&lt;/em&gt; of the things our ECS architecture should solve:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Typed entity storage (how you interact with a list of players, monsters, etc.)&lt;/li&gt;
  &lt;li&gt;Sparse data: both comptime and runtime&lt;/li&gt;
  &lt;li&gt;Archetype storage: both comptime and runtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, these are the design principles I’ve come up with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clean-room implementation (I’ve not read any other ECS implementation code.)&lt;/li&gt;
  &lt;li&gt;Solve the problems ECS solves, in a way that is natural to Zig and leverages Zig comptime.&lt;/li&gt;
  &lt;li&gt;Avoid patent infringement upon Unity ECS patent claims.&lt;/li&gt;
  &lt;li&gt;Fast. Optimal for CPU caches, multi-threaded, leverage comptime as much as is reasonable.&lt;/li&gt;
  &lt;li&gt;Simple. Small API footprint, should be natural and fun - not like you’re writing boilerplate.&lt;/li&gt;
  &lt;li&gt;Enable other libraries to provide tracing, editors, visualizers, profilers, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From this, you can easily gather that storing entities is actually only a small (but critical) portion of this system. In the next article we will get into the details of implementing this in code, and go on to explore more challenging topics like multi-threading, systems, and scheduling in future articles.&lt;/p&gt;

&lt;h2 id=&quot;next-up-starting-our-ecs-implementation&quot;&gt;Next up: starting our ECS implementation&lt;/h2&gt;

&lt;p&gt;As this series develops, all the code is being developed in the Mach repository’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecs&lt;/code&gt; subfolder &lt;a href=&quot;https://github.com/hexops/mach/tree/main/ecs&quot;&gt;on GitHub&lt;/a&gt;. The articles will lag slightly behind.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devlog.hexops.com/categories/lets-build-an-ecs&quot;&gt;As more articles come out, you can find them here&lt;/a&gt;. Join us in developing it, give us advice, etc. &lt;a href=&quot;https://matrix.to/#/#ecs:matrix.org&quot;&gt;on Matrix chat&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/machengine&quot;&gt;follow updates on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like what I’m doing, you can &lt;a href=&quot;https://github.com/sponsors/slimsag&quot;&gt;sponsor me on GitHub&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="gamedev," />
      
        <category term="ecs," />
      
        <category term="build-an-ecs" />
      

      

      
        <summary type="html">In this multi-part series we’ll build the Entity Component System used in Mach engine in the Zig programming language from first principles (asking what an ECS is and walking through what problems it solves) all the way to writing an implementation in a low-level programming language. The only thing you need to follow along is some programming experience and a desire to learn.</summary>
      

      
      
        
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/3173176/149644281-df5a7846-eefb-4482-929b-2ac7243de7a2.png" />
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The f$%!ing terrifying parallels of tech and aerospace</title>
      
      
      <link href="/2021/terrifying-parallels-between-tech-and-aerospace" rel="alternate" type="text/html" title="The f$%!ing terrifying parallels of tech and aerospace" />
      
      <published>2021-11-19T00:00:00+00:00</published>
      <updated>2021-11-19T00:00:00+00:00</updated>
      <id>/2021/terrifying-parallels-between-tech-and-aerospace</id>
      <content type="html" xml:base="/2021/terrifying-parallels-between-tech-and-aerospace">&lt;p&gt;In this article I draw parallels between the tech industry today, and the aerospace industry of the past 30 years. I’ll explain why I’m so f$%!ing terrified of our future and give insight into a problem that I’ve for years thought is truly worth solving - despite me having no idea how to.&lt;/p&gt;

&lt;h2 id=&quot;article-redacted&quot;&gt;Article redacted&lt;/h2&gt;

&lt;p&gt;I’ve hidden this article by default, I don’t think it resonates with my audience very well and I’d like to keep this devlog more development-focused in the future. Also, an overwhelming majority of crypto shills have contacted me about this article saying they have the perfect solution and I just don’t like that.&lt;/p&gt;

&lt;h1 id=&quot;the-fing-terrifying-parallels-of-tech-and-aerospace&quot;&gt;The f$%!ing terrifying parallels of tech and aerospace&lt;/h1&gt;

&lt;p&gt;Software engineering is one of the most lucrative careers of our era. Most in our field suffer from an inability to see how impactful their work truly can be, and by extension, how impactful their day to day work &lt;em&gt;might not be&lt;/em&gt;. Focusing on the right problem is more valuable than producing perfect engineering work.&lt;/p&gt;

&lt;p&gt;The sheer scale of money pouring into SV and other tech hubs worldwide is unfathomable even to many making six-figure salaries in tech, there is more money than there are good ideas-and it shows (looking at you, &lt;a href=&quot;https://www.juicera.com/&quot;&gt;Juicera&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/142679500-29ebcaf2-9d57-4dad-8e35-c1a60bffd793.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-the-aviation-industry-eerily-reflects-the-tech-industry&quot;&gt;How the aviation industry eerily reflects the tech industry&lt;/h2&gt;

&lt;p&gt;Both of my parents have masters degrees in EE (electrical engineering)-and as I like to say to tech friends, my parents are &lt;em&gt;real engineers&lt;/em&gt;. 30 years ago when my parents were in university, electrical engineers were in extremely high demand due to the aerospace boom with companies like Boeing, Honeywell, Dupont, etc. reaching new heights. Advisors at the time made one thing clear to them: EE was the field you go into for a solid career earning the big bucks-everyone knew it.&lt;/p&gt;

&lt;p&gt;Going into EE panned out well for them: my father retained a 30 year long career in aerospace engineering and retired recently, me and my 3 siblings grew up as a lower-middle class American family while our mom stayed at home to educate us. What started as fairly respectable engineering work in the first half of my dad’s career, however, quickly became something else over the next 15 years. My father was responsible almost solely for outsourcing other people’s jobs at these companies to cookie-cutter contracting companies based in India and elsewhere, he was nothing but a small cog in a machine making a massive push to cut costs. This created substantial stress in his life and ours.&lt;/p&gt;

&lt;p&gt;This industry-wide push came about because the aerospace industry realized their engineering problems were mostly solved (they were not seeing any new major inventions in aerospace) and so the need for solid engineering work lessened, a vicious cycle followed which led to less innovation and ultimately a heavy-handed push from management to just continue the status quo.&lt;/p&gt;

&lt;p&gt;If you think Boeing’s 747 MAX disaster was the downfall of the aerospace industry, you need to think again. There are things you’re not going to find in the news that happened much earlier according to people that were there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/142681033-f26e31ea-8384-4034-83e0-17c293c10422.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Despite my mother’s internship being 30 years ago, she is still hesitant to publicly name the company involved and at her request I redacted the name.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/142681141-eabbdae3-8f3d-4af4-be8a-1d88a81f1e5e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The stress my father’s job imposed upon him changed him (or rather, brought out another side of him.) Most of my memories with him involved verbal and heavily emotional fights, as well as arguments between him, myself, and family members. Most of the time I spent with him in public, he was making some poor customer service worker’s life a living hell (and he enjoyed it.)&lt;/p&gt;

&lt;p&gt;Ultimately, my parents divorced when we were teenagers in what was a gruesome 3+ year long battle which led to an aggressive divide between him and the rest of the family. Court-mandated counselling by a super-religious state counsellor for me and my siblings (“the bible says you must obey thy father” and whatnot), as we did not want to be around him. A federal judge in the state of Arizona spent 20m with each of us children to intimidate us in an attempt to get us to obey and spend time with him. None of us wanted to, and for good reason.&lt;/p&gt;

&lt;p&gt;My own 20m with the judge ended up being 2+ hours, and delayed all the other cases on his docket that day. He argued I would become a delinquent if I stopped spending time with my father after I turned 18 (which was just a few weeks away) and he did absolutely everything in his power to suggest that I was &lt;em&gt;required&lt;/em&gt; to do so. In retrospect, I can see today that this was a frankly astonishing abuse of power by a judge with good intentions. Ultimately, after crying and arguing with the judge for several hours I won the argument by asking “Are you saying that I have to see my father legally as a judge?” to which he responded “As a person, and as someone who has seen enough of these situations to know what is going to happen, I am saying you have to.” - “Then I think we understand each-other, is there anything else?” I said before leaving with frustrated smile on my face to the fear and confusion of everyone, my parents included, who had been waiting outside the court room for so long wondering what all the shouting was about. The judge resigned from family law less than a year later, I think in part due to his interaction with me but I will never know.&lt;/p&gt;

&lt;p&gt;It’s difficult to think about the blossoming world of Electrical Engineering that my parents grew up in, which ultimately became somewhat of a cage for them and led to a spectacular downfall of not just the industry as a whole, but I suspect many of the families and people involved in that industry.&lt;/p&gt;

&lt;p&gt;When I look at the state of the tech industry today and see pushes for location-dependent pay decreases, or Facebook’s shift in direction due to the business risks they see, it’s hard for me not to ask “are these signals that big tech has reached the same plateau of innovation that will begin a wider a much wider push for cost-cutting?”&lt;/p&gt;

&lt;h2 id=&quot;have-we-reached-a-plateau&quot;&gt;Have we reached a plateau?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/142683055-c24a21ce-542a-400f-9c5a-04188d8d31e2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Major economic forces have been pushing the idea that everyone should learn to code for many, many years now, &lt;a href=&quot;https://www.cnn.com/2013/02/27/tech/innovation/code-video-gates-zuckerberg/index.html&quot;&gt;Gates and Zuckerberg were pushing the idea that every child should learn to code back in 2013&lt;/a&gt; and likely long before that. (Awkward disclaimer, my day job is at a startup focused on this too)&lt;/p&gt;

&lt;p&gt;I talk regularly with people outside of the tech industry, Uber drivers, etc. who are completely detached from what is going on in the tech industry and not in cities where tech is popular. It always offers me a “normal person’s” perspective into the state of things. Particularly intriguing is how often these people state they are trying to get into tech, trying to learn to code, etc. but are not sure how to as soon as they realize that’s what I do. The general population is aware of how many economic opportunities there are within tech.&lt;/p&gt;

&lt;p&gt;More people coding does not necessarily negate the economic opportunity for everyone everyone, though, as indeed the tech industry is ever-growing still today. Or is it? If investors begin to get skittish, I believe we could see a large push within the tech industry to cut costs and engineers are the primary source of costs, after all.&lt;/p&gt;

&lt;p&gt;We see companies like Uber and Lyft in races to the bottom today. For a given opportunity area, there are at least 2-5 companies backed by different VCs intending to race to the bottom in order to acquire the winner-takes-all market for that area.&lt;/p&gt;

&lt;p&gt;We see big tech struggling to address the privacy concerns of the public which they fear will lead to strict regulation in the future. We see them struggling to find new ways to diversify their application of technology to new industries to avert these risks. What will happen if Google/Alphabet’s Waymo self-driving cars do not pan out? What happens if Facebook’s metaverse does not pan out? I think that’s when investors would get skittish.&lt;/p&gt;

&lt;h2 id=&quot;what-will-being-a-coder-look-like-in-the-future&quot;&gt;What will being a coder look like in the future?&lt;/h2&gt;

&lt;p&gt;We have a representation of what being a coder could look like in the future: there’s a high demand for coding jobs, a nearly infinite stream of new employees who are looking to enter the industry and will do whatever it takes to meet the demands of the job, including accepting low pay. With new tools reducing the need for experienced industry veterans, because we don’t need to do anything truly innovative - we just need to continue the status quo (sound familiar to the aerospace story from earlier?)&lt;/p&gt;

&lt;p&gt;The future of being a coder, I think, looks an awful lot like being a game developer looks like today.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/142684131-097dbaa9-1843-4aa6-aacf-5089600bbb0f.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter a behemoth organization and hope to achieve anything noteworthy among the swaths of so many other coders that your contributions are nearly worthless, or go to a smaller company because you are young, bubbly-eyed, and believe there is a family to be had there all while it being demanded you achieve unreasonable amounts of work with a high likelihood that the company fails in the end. You get to choose. You wish you could go at it alone, you have dreams and aspirations of doing just that, but you need to pay the bills somehow. Perhaps you’re just out of school, and so you manage Active Directory for a company instead.&lt;/p&gt;

&lt;p&gt;Maybe you do have a truly good idea, but you don’t have access to investors and funding. And you’re not looking for $118 million to build the next $400 juice machine that squeezes pre-packaged bags of fruit together with mechanical arms - you’re just looking to do some honest-to-god good work and make something people are willing to pay for. You’re dreaming of a sustainable business, not a unicorn like Juicera - so they wouldn’t invest in you anyway.&lt;/p&gt;

&lt;h2 id=&quot;the-new-corporate-model-to-take-reward--assume-no-risk&quot;&gt;The new corporate model to take reward &amp;amp; assume no risk&lt;/h2&gt;

&lt;p&gt;The squashing of independent ideas and independent business models creates opportunities for monopolistic enterprises to effectively &lt;em&gt;own people&lt;/em&gt; and &lt;em&gt;own their success&lt;/em&gt; while divesting risk fully to individuals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/142683218-8f4949aa-7937-4e58-b2bc-5862ae68b2fa.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the plateau for any of these markets is reached (or if platforms realize that we’re not going to see a winner-take-all market for that area?), then profit extraction should begin and we will see middlemen shift to maximal extraction of taxes from their platform while producers only begin to realize how minute they have become. New platforms will appear, such as the YouTube competitors pushed by creators today, but they’ll mostly be in-vain attempts to regain some control of the customers they now realize they have no untaxed access to.&lt;/p&gt;

&lt;p&gt;This approach of tech business is accelerating. When we hear “every company is becoming a tech company”, this is a core model being described and it’s not fundamentally different from the outsourcing of manufacturing jobs to third-world countries we did historically-the only difference is we’re seeing the outsourcing the production of &lt;em&gt;everything&lt;/em&gt; and instead of it being cheaper because we avoid safety regulations, it’s cheaper because individuals who are their own “companies” and are forced to assume all risk of producing new things or lose out on the market entirely. Reward must be divested to the platform they are beholden to.&lt;/p&gt;

&lt;h2 id=&quot;does-capitalism-necessarily-have-to-be-bad-for-society&quot;&gt;Does capitalism necessarily have to be bad for society?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/142684228-bf1d41e5-ca25-4497-978c-d82c29c7682e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, you probably think I hold deeply anti-capitalistic views. I don’t, I hold more nuanced views than that. But I do despise the monopolistic tendencies of corporations. It’s the lack of distributed opportunity within a capitalist society that I believe is bad.&lt;/p&gt;

&lt;p&gt;VCs must deal with such large swaths of money that they must operate at much higher levels, they often can barely assess the validity of their investments despite employing people to do exactly that. They generally do not invest the small amounts of money which individuals need to bootstrap businesses, but rather they bet hundreds of millions on the next unicorn while knowing that the amount invested is still a mere drop in the bucket for them.&lt;/p&gt;

&lt;p&gt;Platforms like Kickstarter, Indiegogo, and others attempt to solve this issue by soliciting donations. If you have a good idea and can pitch it effectively, you can receive funding. But there are problems here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Incentives - you’re not investing the money you donate, but rather are purchasing a product that you hope will be delivered one day. Perversion exists here because the producer views it as an investment in them, while the consumer views it as a purchase.&lt;/li&gt;
  &lt;li&gt;It benefits those with marketing skills over production skills. You can create an excellent product, but if you do not have the marketing skills for it, you’re not going to get funded on those platforms. There are numerous examples of marketing teams winning stupid amounts of money on these platforms without the production skills to back it up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I envision a world much like I suspect the stock market was originally envisioned: a place where if I find a producer (content creator, game developer, product manufacturer, etc.) I believe in then I have the opportunity to invest in them, whether they be an individual or small group, and share in their success if that occurs.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-solution&quot;&gt;What’s the solution?&lt;/h2&gt;

&lt;p&gt;I don’t have one.&lt;/p&gt;

&lt;p&gt;This is one problem that I would truly love to try and solve with &lt;a href=&quot;https://hexops.com&quot;&gt;Hexops&lt;/a&gt; in the next 10 years if I ever get the opportunity to. I’ve talked about this issue with friends for several years now, but never publicly because frankly I just don’t have a solution.&lt;/p&gt;

&lt;p&gt;On a personal leve, I’d love to be able to invest a couple hundred to a thousand dollars in game developers that I personally I follow and believe in. If this was possible, I think it would create some beautiful and symbiotic relationships between creators and their communities.&lt;/p&gt;

&lt;p&gt;One can easily imagine a platform like Kickstarter where donations are, in fact, investments-but this quickly runs afoul of numerous securities laws and regulations in the U.S. and I’m not sure those can be overcome in a way that still makes investment on a small scale viable for the general public.&lt;/p&gt;

&lt;p&gt;If you have thoughts around this or other ways we can avert the impeding doom I think we will face in the future, then I’d love to hear from you. stephen@hexops.com or in the comments section wherever this ends up.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="business," />
      
        <category term="future" />
      

      

      
        <summary type="html">In this article I draw parallels between the tech industry today, and the aerospace industry of the past 30 years. I’ll explain why I’m so f$%!ing terrified of our future and give insight into a problem that I’ve for years thought is truly worth solving - despite me having no idea how to.</summary>
      

      
      
        
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/3173176/142679656-38f3a45c-3552-46a0-af32-f05d40d8af52.png" />
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Perfecting GLFW for Zig, and finding lurking undefined behavior that went unnoticed for 6+ years</title>
      
      
      <link href="/2021/perfecting-glfw-for-zig-and-finding-undefined-behavior" rel="alternate" type="text/html" title="Perfecting GLFW for Zig, and finding lurking undefined behavior that went unnoticed for 6+ years" />
      
      <published>2021-10-31T00:00:00+00:00</published>
      <updated>2021-10-31T00:00:00+00:00</updated>
      <id>/2021/perfecting-glfw-for-zig-and-finding-undefined-behavior</id>
      <content type="html" xml:base="/2021/perfecting-glfw-for-zig-and-finding-undefined-behavior">&lt;p&gt;&lt;strong&gt;Today, I am announcing &lt;a href=&quot;https://github.com/hexops/mach-glfw&quot;&gt;mach-glfw&lt;/a&gt;: Ziggified GLFW bindings with 100% API coverage, zero-fuss installation, cross compilation, and more.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-mach-for-everyone&quot;&gt;Building Mach for everyone&lt;/h2&gt;

&lt;p&gt;If &lt;a href=&quot;https://github.com/hexops/mach&quot;&gt;Mach engine&lt;/a&gt; only benefits people interested in using that engine, and not the broader Zig (and even gamedev) community I would consider that &lt;em&gt;a total failure&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Whether you’re interested in using all of Mach, just some of it with your own engine / project, or just the tools/ideas we develop in the future (with Unity, Unreal, etc.), &lt;em&gt;I truly aim to produce something that benefits you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Mach is in super early stages, I’ve spent the last four months perfecting a Zig interface to GLFW, and making no-fuss installation and cross-compilation a reality. Today, you can benefit from that work too.&lt;/p&gt;

&lt;h2 id=&quot;building-glfw-for-every-platform&quot;&gt;Building GLFW for every platform&lt;/h2&gt;

&lt;p&gt;Just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zig&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;, that’s the idea. The GLFW C code is compiled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zig&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.zig&lt;/code&gt; file automatically uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; to clone (a very minimal set of) system dependencies for you (X11 libraries, etc.)&lt;/p&gt;

&lt;p&gt;No installing apt packages. No dealing with missing header errors. It should just work out-of-the-box, and for every platform:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137650099-cd370046-eb43-4fe4-a72a-f54ebe3153c1.png&quot;&gt;&lt;img alt=&quot;Mach engine platform support, including Windows, Linux, Mac and cross-compilation between them with Android/iOS coming soon.&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137650099-cd370046-eb43-4fe4-a72a-f54ebe3153c1.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, this works for GLFW itself. Cross-compilation of &lt;em&gt;OpenGL and Vulkan apps&lt;/em&gt; is not yet fully functional. &lt;a href=&quot;https://github.com/hexops/mach/issues/59&quot;&gt;We’re working on it, though.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;perfecting-glfw-for-zig&quot;&gt;Perfecting GLFW for Zig&lt;/h2&gt;

&lt;p&gt;Aside from platform support, mach-glfw now has:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;100% API coverage&lt;/strong&gt; of GLFW v3.3.4. Every function, type, constant, etc. has been wrapped in a ziggified API.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;130+ tests&lt;/strong&gt;, with CI testing Linux, Windows, Mac (x86 and M1/ARM) and cross-compilation between them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might be asking: &lt;em&gt;why Zig bindings, when Zig can interface directly with C?&lt;/em&gt; Ziggified bindings to GLFW get us:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Errors as &lt;a href=&quot;https://ziglang.org/documentation/master/#Errors&quot;&gt;zig errors&lt;/a&gt; instead of via a callback function.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enums&lt;/strong&gt;: always know what value a GLFW function can accept as everything is strictly typed. And use the nice Zig syntax to access enums, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.getKey(.escape)&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c.glfwGetKey(window, c.GLFW_KEY_ESCAPE)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Slices instead of C pointers and lengths.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ziglang.org/documentation/master/#packed-struct&quot;&gt;packed structs&lt;/a&gt; represent bit masks, so you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (joystick.down and joystick.right)&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; etc. bitwise operators.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c.GLFW_TRUE&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c.GLFW_FALSE&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Generics: use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.hint&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;glfwWindowHint&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;glfwWindowHintString&lt;/code&gt;, etc.&lt;/li&gt;
  &lt;li&gt;Methods, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_window.hint(...)&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;glfwWindowHint(my_window, ...)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;explicit-error-handling-solves-a-real-problem&quot;&gt;Explicit error handling solves a real problem&lt;/h2&gt;

&lt;p&gt;GLFW traditionally passes errors to the user via a callback. This can make errors easy to ignore, as well as difficult to correlate and handle effectively at the time of the function invocation.&lt;/p&gt;

&lt;p&gt;We translated a &lt;a href=&quot;https://github.com/hexops/mach-glfw-vulkan-example&quot;&gt;a Vulkan example to mach-glfw&lt;/a&gt;, which you can try for yourself today:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/139573985-d862f35a-e78e-40c2-bc0c-9c4fb68d6ecd.png&quot;&gt;&lt;img alt=&quot;mach-glfw and vulkan-zig libraries working together to produce a triangle.&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/139573985-d862f35a-e78e-40c2-bc0c-9c4fb68d6ecd.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After porting it, we found that the example was crashing with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoWindowContext&lt;/code&gt; error. Strange?&lt;/p&gt;

&lt;p&gt;As it turns out, we had found &lt;a href=&quot;https://github.com/Snektron/vulkan-zig/pull/21&quot;&gt;a small bug in the vulkan-zig example code&lt;/a&gt;, it was calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;glfwSwapBuffers&lt;/code&gt; which is not needed for Vulkan. The error went unnoticed because it’s easy to miss errors with GLFW’s error callback handling style. But with mach-glfw, it was an explicit error you have to handle e.g. via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try glfw.swapBuffers()&lt;/code&gt; - we literally couldn’t miss it.&lt;/p&gt;

&lt;h2 id=&quot;finding-lurking-undefined-behavior-in-6-year-old-glfw-code&quot;&gt;Finding lurking undefined behavior in 6+ year old GLFW code&lt;/h2&gt;

&lt;p&gt;One &lt;em&gt;particularly frustrating&lt;/em&gt; issue was tracking down why the last part of the GLFW API we needed to wrap for 100% coverage, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;glfwSetWindowIcon&lt;/code&gt; function, was crashing:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Test [76/135] Window.test &quot;setIcon&quot;... Illegal instruction at address 0x2cee09
upstream/glfw/src/x11_window.c:0:0: 0x2cee09 in _glfwPlatformSetWindowIcon (/mach/glfw/upstream/glfw/src/x11_window.c)
upstream/glfw/src/window.c:511:5: 0x2de484 in glfwSetWindowIcon (/mach/glfw/upstream/glfw/src/window.c)
    _glfwPlatformSetWindowIcon(window, count, images);
    ^
/mach/glfw/src/Window.zig:508:28: 0x23a083 in Window.test &quot;setIcon&quot; (test)
        c.glfwSetWindowIcon(self.handle, @intCast(c_int, im.len), &amp;amp;tmp[0]);
                           ^
/usr/local/bin/lib/std/special/test_runner.zig:77:28: 0x25a0d1 in std.special.main (test)
        } else test_fn.func();
                           ^
/usr/local/bin/lib/std/start.zig:517:22: 0x2896bc in std.start.callMain (test)
            root.main();
                     ^
/usr/local/bin/lib/std/start.zig:469:12: 0x25c117 in std.start.callMainWithArgs (test)
    return @call(.{ .modifier = .always_inline }, callMain, .{});
           ^
/usr/local/bin/lib/std/start.zig:434:12: 0x25bec2 in std.start.main (test)
    return @call(.{ .modifier = .always_inline }, callMainWithArgs, .{ @intCast(usize, c_argc), c_argv, envp });
           ^
???:?:?: 0x7f4b7c3280b2 in ??? (???)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s odd? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Illegal instruction at address 0x2cee09&lt;/code&gt; - are we corrupting the stack somehow? Is this a Zig compiler bug?&lt;/p&gt;

&lt;p&gt;Running in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt; didn’t help with shining any light on the problem, either:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/139576146-775371fd-8003-46ba-aa30-8b81a2f22ce0.png&quot;&gt;&lt;img alt=&quot;lldb showing nothing particularly useful&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/139576146-775371fd-8003-46ba-aa30-8b81a2f22ce0.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After poking around at the stack, checking all pointers and lengths were valid, etc. I was at a loss. The mach-glfw code &lt;em&gt;sure seemed valid&lt;/em&gt;, and yet, this crash. I managed to track the crash down to the first iteration of a loop in GLFW’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x11_window.c&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_glfwSetWindowIconX11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_GLFWwindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLFWimage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;longCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_glfw_calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// illegal instruction on first iteration?&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reaching-my-limits&quot;&gt;Reaching my limits&lt;/h2&gt;

&lt;p&gt;At this point, I feel confident in saying:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Zig code is correct, the pointers are valid, the lengths are correct, everything’s right.&lt;/li&gt;
  &lt;li&gt;The GLFW code is pretty popular, and it’s been around for 6 years. Seems unlikely it’s a bug in GLFW?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luckily, my brother (and reverse engineer) &lt;a href=&quot;https://github.com/Andoryuuta&quot;&gt;@Andoryuuta&lt;/a&gt; was available to help debug, so I pulled him in. Stepping through instructions, we could see clearly that after a bit shift we were stepping into the abyss:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* thread #1, name = 'test', stop reason = instruction step over
    frame #0: 0x00000000002c6f84 test`_glfwPlatformSetWindowIcon(window=0x00000000004e53d0, count=1, images=0x00007fffec0b3000) at x11_window.c:2156:58
   2153	                *target++ = (images[i].pixels[j * 4 + 0] &amp;lt;&amp;lt; 16) |
   2154	                            (images[i].pixels[j * 4 + 1] &amp;lt;&amp;lt;  8) |
   2155	                            (images[i].pixels[j * 4 + 2] &amp;lt;&amp;lt;  0) |
-&amp;gt; 2156	                            (images[i].pixels[j * 4 + 3] &amp;lt;&amp;lt; 24);
   2157	                printf(&quot;DID WE GET HERE???x\n&quot;);
   2158	            }
   2159	        }
(lldb) 
Process 6516 stopped
* thread #1, name = 'test', stop reason = instruction step over
    frame #0: 0x00000000002c6c21 test`_glfwPlatformSetWindowIcon(window=0x00000000004e53d0, count=1, images=0x00007fffec0b3000) at x11_window.c:0
   1   	//========================================================================
   2   	// GLFW 3.3 X11 - www.glfw.org
   3   	//------------------------------------------------------------------------
   4   	// Copyright (c) 2002-2006 Marcus Geelnard
   5   	// Copyright (c) 2006-2019 Camilla Löwy &amp;lt;elmindreda@glfw.org&amp;gt;
   6   	//
   7   	// This software is provided 'as-is', without any express or implied
(lldb) 
Process 6516 stopped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inspecting the binary in IDA Pro we were able to see that we were jumping into an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__asm { ud1 }&lt;/code&gt; section (ud1 standing for “undefined instruction 1”):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/139594073-b2159e4c-6764-44b1-882d-802724f424e8.png&quot;&gt;&lt;img alt=&quot;IDA Pro showing a jump to an undefined instruction 1&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/139594073-b2159e4c-6764-44b1-882d-802724f424e8.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turns out that clang’s UBSan inserts these instructions as traps for when the compiler thinks there is undefined behavior occurring, such as if a pointer addition leads to an overflow. This is super interesting, but unfortunately doesn’t always give a compiler error. We got lucky and found someone else who ran into this through Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I &lt;em&gt;believe&lt;/em&gt; LLVM explicitly generates a ud2 x86 instruction because &quot;it determined&quot; there's undefined behavior in the C code. So first I wonder which flags you're passing it through zig (i.e. how strict are you being with the settings?)&amp;lt;/p&amp;gt;— Abner (@AbnerCoimbre) &lt;a href=&quot;https://twitter.com/AbnerCoimbre/status/1339396987100168192&quot;&gt;December 17, 2020&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And indeed, compiling via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zig build test -Drelease-fast&lt;/code&gt; (which turns off UBsan) made the crash go away. So where’s the undefined behavior?&lt;/p&gt;

&lt;p&gt;If we squint at the code and assume all pointers, counts, and indices are correct, you might be able to spot it:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_glfwSetWindowIconX11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_GLFWwindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLFWimage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// illegal instruction on first iteration?&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What is happening here is that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;images[i].pixels[j * 4 + 0]&lt;/code&gt; is returning an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsigned char&lt;/code&gt; (8 bits)&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;It is then being shifted left by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt; 16&lt;/code&gt; bits. !!! That’s further than an 8-bit number can be shifted left by, so that’s UB&lt;/del&gt;
    &lt;ul&gt;
      &lt;li&gt;EDIT: Actually, it turns out that’s not exactly right, it’s the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt; 24&lt;/code&gt; that’s the cause of the UB, thanks &lt;a href=&quot;https://github.com/Maato&quot;&gt;@Maato&lt;/a&gt; for &lt;a href=&quot;https://github.com/glfw/glfw/pull/1986#issuecomment-955784179&quot;&gt;pointing this out and explaining in better detail than I could&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Suddenly, it all makes sense. And &lt;a href=&quot;https://godbolt.org/z/ddq75WsYK&quot;&gt;if we load an equal snippet of code into Godbolt&lt;/a&gt; we can see what is happening when we compile without UBSan / the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-fsanitize=undefined&lt;/code&gt; flag:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/139594650-eff35347-3f32-42e5-bc60-da2a1dceb1e1.png&quot;&gt;&lt;img alt=&quot;Compilation with godbolt with UBSan turned off shows movement into 32-bit EAX register&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/139594650-eff35347-3f32-42e5-bc60-da2a1dceb1e1.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without UBsan, clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it &lt;em&gt;does not get truncated to zero&lt;/em&gt; - instead it is effectively as if the number was converted to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;long&lt;/code&gt; (32 bits) prior to the left-shift operation.&lt;/p&gt;

&lt;p&gt;This explains why nobody has caught this UB in GLFW yet, too: it works by accident! Just because the compiler likes to use 32-bit registers in this context.&lt;/p&gt;

&lt;p&gt;And this change benefits all the languages out there using GLFW: &lt;a href=&quot;https://github.com/glfw/glfw/pull/1986&quot;&gt;glfw/glfw#1986&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;defaults-are-critical&quot;&gt;Defaults are &lt;em&gt;critical&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;This code, and undefined behavior, has been in GLFW for over 6 years according to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git blame&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Anybody using GLFW &lt;em&gt;could have&lt;/em&gt; enabled UBSan in their C compiler. Anybody &lt;em&gt;could have&lt;/em&gt; run into this same crash and debugged it in the last 6 years. But they didn’t.&lt;/p&gt;

&lt;p&gt;In mach-glfw, we compile all of GLFW’s C code with Zig (which is also a fully functional C and C++ compiler), with UBSan enabled by default.&lt;/p&gt;

&lt;p&gt;Only because Zig has good defaults, because it places so much emphasis on things being right &lt;em&gt;out of the box&lt;/em&gt;, and because there is such an emphasis on having safety checks for undefined behavior - were we able to catch this undefined behavior that went unnoticed in GLFW for the last 6 years.&lt;/p&gt;

&lt;h2 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading&lt;/h2&gt;

&lt;p&gt;All key Mach engine developments will be posted here, with incremental updates on Twitter &lt;a href=&quot;https://twitter.com/machengine&quot;&gt;@machengine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Follow &lt;a href=&quot;https://github.com/hexops/mach&quot;&gt;Mach engine on GitHub&lt;/a&gt;, and if you like what I’m doing please consider &lt;a href=&quot;https://github.com/sponsors/slimsag&quot;&gt;sponsoring my work&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="mach," />
      
        <category term="zig," />
      
        <category term="gamedev," />
      
        <category term="glfw" />
      

      

      
        <summary type="html">Today, I am announcing mach-glfw: Ziggified GLFW bindings with 100% API coverage, zero-fuss installation, cross compilation, and more.</summary>
      

      
      
        
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/3173176/139573985-d862f35a-e78e-40c2-bc0c-9c4fb68d6ecd.png" />
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Mach Engine: The future of graphics (with Zig)</title>
      
      
      <link href="/2021/mach-engine-the-future-of-graphics-with-zig" rel="alternate" type="text/html" title="Mach Engine: The future of graphics (with Zig)" />
      
      <published>2021-10-17T00:00:00+00:00</published>
      <updated>2021-10-17T00:00:00+00:00</updated>
      <id>/2021/mach-engine-the-future-of-graphics-with-zig</id>
      <content type="html" xml:base="/2021/mach-engine-the-future-of-graphics-with-zig">&lt;p&gt;In the coming months, we’ll begin to have truly cross-platform low-level graphics, with the ability to cross compile GPU-accelerated applications written in Zig from any OS and deploy to desktop, mobile, and (in the future) web.&lt;/p&gt;

&lt;h2 id=&quot;mach-engine&quot;&gt;Mach engine&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; alt=&quot;Mach: Game engine &amp;amp; graphics toolkit for the future&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137651926-3734c3b2-4875-47de-b42f-0ece854756f7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been working on &lt;a href=&quot;https://github.com/hexops/mach&quot;&gt;Mach Engine&lt;/a&gt; for about 4 months now, although it as a project is many years in the making, and I believe in the next 4-6 months we’ll have completion of the first key milestone: truly cross platform graphics and seamless cross compilation.&lt;/p&gt;

&lt;h2 id=&quot;vision&quot;&gt;Vision&lt;/h2&gt;

&lt;p&gt;Today, I share only the first milestone: Mach engine core. I’ve been working on this for around 1 year now, and we’re close (maybe 4-6 months away) from completion:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137649720-072ff7fe-323d-49c6-ae88-51344e04e3e5.png&quot;&gt;&lt;img alt=&quot;Zero fuss installation, out of the box cross compilation, and a truly cross-platform graphics API&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137649720-072ff7fe-323d-49c6-ae88-51344e04e3e5.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;zero-fuss-installation--cross-compilation&quot;&gt;Zero fuss installation &amp;amp; cross compilation&lt;/h2&gt;

&lt;p&gt;Only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zig&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; are needed to build from any OS and produce binaries for every OS. You do &lt;strong&gt;not&lt;/strong&gt; need any system dependencies, C libraries, SDKs (Xcode, etc.), C compilers or anything else.&lt;/p&gt;

&lt;p&gt;We’re able to achieve this thanks to two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Zig has fantastic cross-compilation support, including its own custom linker &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zld&lt;/code&gt; written by &lt;a href=&quot;http://www.jakubkonka.com/&quot;&gt;Jakub Konka&lt;/a&gt; which is capable of supporting MacOS cross compilation.&lt;/li&gt;
  &lt;li&gt;Mach doing the heavy lifting of packaging the required system SDK libraries and C sources for e.g. GLFW so our Zig build scripts can simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; them for you as needed for the target OS you’re building for, completely automagically.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;truly-cross-platform-graphics-api&quot;&gt;Truly cross-platform graphics API&lt;/h2&gt;

&lt;h3 id=&quot;directx-12-metal-vulkan--opengl&quot;&gt;DirectX 12, Metal, Vulkan &amp;amp; OpenGL&lt;/h3&gt;

&lt;p&gt;Imagine a low-level, little to no overhead graphics API that unifies DirectX, Metal, Vulkan, and OpenGL (if no others are available):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137646296-72ba698e-c710-4daf-aa75-222f8d717d00.png&quot;&gt;&lt;img alt=&quot;Simple, low-level unified graphics API mapping to DirectX 12, Metal, Vulkan, and OpenGL&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137646296-72ba698e-c710-4daf-aa75-222f8d717d00.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This isn’t anything new:&lt;/em&gt; all modern engines provide this, Godot has been working towards this for &lt;em&gt;years&lt;/em&gt; (and still is), and there exist abstraction layers for Vulkan over most of these APIs as well.&lt;/p&gt;

&lt;h3 id=&quot;vendor-support&quot;&gt;Vendor support&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;An API is only as good as the momentum behind it.&lt;/strong&gt; What modern API can target the largest array of platforms with the most vendor backing?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137647361-3340e33a-9b2f-4c0d-aba5-6bb99ffd1cd8.png&quot;&gt;&lt;img alt=&quot;Google to Vulkan, Microsoft to DirectX, Apple to Metal, AMD and NVidia to everything.&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137647361-3340e33a-9b2f-4c0d-aba5-6bb99ffd1cd8.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Microsoft sees DirectX as the future, not Vulkan.&lt;/strong&gt; (DirectX 13 is coming by the end of 2022.)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apple sees Metal as the future, not Vulkan.&lt;/strong&gt; OpenGL and OpenCL are deprecated, and private legal arguments with Khoronos make it unlikely we’ll ever see OpenGL or Vulkan on Apple hardware ever again.&lt;/li&gt;
  &lt;li&gt;Google, with their Fuschia OS &lt;a href=&quot;https://fuchsia.dev/fuchsia-src/concepts/graphics/magma&quot;&gt;appears to be primarily into Vulkan&lt;/a&gt; from a system-level POV.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NVIDIA, AMD, and Intel generally support as many graphics APIs as possible&lt;/strong&gt;, they want to sell hardware.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;one-api-that-apple-microsoft-and-google-can-all-agree-on&quot;&gt;One API that Apple, Microsoft, and Google can all agree on&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137647342-abf2bde6-a8bb-4276-b072-95c279c5d92f.png&quot;&gt;&lt;img alt=&quot;Mozilla, Google, Microsoft, Apple, and Intel all to WebGPU&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137647342-abf2bde6-a8bb-4276-b072-95c279c5d92f.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Outside the bounds of traditional graphics APIs there exists an attempt to provide a unified API across all platforms, &lt;a href=&quot;https://en.wikipedia.org/wiki/WebGPU&quot;&gt;WebGPU&lt;/a&gt; (not to be confused with the much older &lt;em&gt;WebGL&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Mozilla, Google, Apple, and Microsoft all got together to build an abstraction layer over the modern graphics APIs - finding the common ground between Direct3D 12, Metal, and Vulkan - plus a safe way to expose that functionality in browsers.&lt;/p&gt;

&lt;p&gt;The name &lt;em&gt;WebGPU&lt;/em&gt; might lead you to believe that this is only for browsers, and that it may not be low-level or fast - but this really couldn’t be further from the truth.&lt;/p&gt;

&lt;h3 id=&quot;apple--googles-role-is-what-makes-webgpu-unique-and-why-we-chose-it&quot;&gt;Apple &amp;amp; Google’s role is what makes WebGPU unique, and why we chose it&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137648560-e15820d7-6427-4ebd-95bb-c7c9f026477a.png&quot;&gt;&lt;img alt=&quot;Khronos group out of the piture in the future&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137648560-e15820d7-6427-4ebd-95bb-c7c9f026477a.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is new about WebGPU in my view is the vendors playing key roles in its development, and the fact that it grew outside the Khronos Group.&lt;/p&gt;

&lt;p&gt;Although abstraction layers over modern graphics APIs are nothing new - as Apple, Google, and Microsoft continue to get more into manufacturing their own hardware (it’s clear this is a strategic move for them) we should ask ourselves how this will change the landscape, and WebGPU is the first cross-vendor API to be produced by this new ecosystem.&lt;/p&gt;

&lt;h3 id=&quot;webgpu-extended-thoughts&quot;&gt;WebGPU extended thoughts&lt;/h3&gt;

&lt;details&gt;
&lt;summary&gt;Is WebGPU &quot;native enough&quot;? Yes&lt;/summary&gt;

&lt;p&gt;For browsers, WebGPU will require sandboxing and validation layers. But in native uses, this can all be turned off, and the WebGPU developers are clearly thinking about this use case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google's implementation of WebGPU, &lt;a href=&quot;https://dawn.googlesource.com/dawn&quot;&gt;Dawn&lt;/a&gt;, can be configured to effectively turn off all browser sandboxing / validation that could harm performance due to its client/server architecture.&lt;/li&gt;

&lt;li&gt;Mozilla / gfx-rs Rust engineers have published articles such as &lt;a href=&quot;http://kvark.github.io/web/gpu/native/2020/05/03/point-of-webgpu-native.html&quot;&gt;&quot;The point of WebGPU on native&quot;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As for the quality of implementations, we could compare the amount of resources going into e.g. Google's WebGPU implementation vs. the amount of resources going into Unity/Unreal/MoltenVK/other graphics abstraction layers - but I suspect they're &lt;em&gt;about equal&lt;/em&gt;.&lt;/p&gt;

&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;Will WebGPU be implemented on GPUs natively? Maybe someday&lt;/summary&gt;

&lt;p&gt;Not anytime soon. We get some insight into this &lt;a href=&quot;https://github.com/gpuweb/gpuweb/issues/847#issuecomment-642883924&quot;&gt;via @kvark&lt;/a&gt;, a WebGPU developer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[...] We are not in Khronos, and therefore we have limited participation from IHVs (only Intel and Apple are active). WebGPU was never designed to be implemented by the drivers. I mean, it would totally be rad, in the context of how usable WebGPU &lt;a href=&quot;http://kvark.github.io/web/gpu/native/2020/05/03/point-of-webgpu-native.html&quot;&gt;can be on native&lt;/a&gt;, but it couldn't be the requirement from the start.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But as WebGPU usage grows or even becomes prodominate due to it being the most powerful API in browsers, and as Microsoft, Google, and Apple continue to develop their own hardware - I think it's not unreasonable to think that it's possible some day WebGPU will be an even more direct 1:1 mapping between a cross-platform API and low-level APIs, more direct than Vulkan abstraction layers such as MoltenVK (which is required to get Vulkan working on top of MacOS's Metal API) - with the potential that some vendor starts asking &quot;what would a GPU native WebGPU implementation look like?&quot;&lt;/p&gt;

&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;Momentum of WebGPU vs. Vulkan&lt;/summary&gt;

&lt;p&gt;To &lt;a href=&quot;https://news.ycombinator.com/item?id=23090432&quot;&gt;quote&lt;/a&gt; &lt;a href=&quot;http://kvark.github.io/about/&quot;&gt;Dzmitry Malyshau / kvark&lt;/a&gt;, a Mozilla engineer working on gfx-rs and WebGPU:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At some point, it comes down to the amount of momentum behind the API. In case of WebGPU, we have strong support from Intel and Apple, which are hardware vendors, as well as Google, who can influence mobile hardware vendors. We are making the specification and have resources to appropriately test it and develop the necessary workarounds. It's the quantity to quality transition that sometimes just needs to cross a certain threshold in order to succeed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to some, Nvidia and AMD tend to develop new features with Microsoft as part of DirectX. Only then are they &quot;ported&quot; back to Vulkan and OpenGL. I think that says a lot.&lt;/p&gt;

&lt;/details&gt;

&lt;h2 id=&quot;what-progress-has-been-made-so-far-on-mach-engine&quot;&gt;What progress has been made so far on Mach Engine?&lt;/h2&gt;

&lt;p&gt;Today, we have cross-compilation of GLFW on all desktop OSs working out of the box with nothing more than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zig&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137650099-cd370046-eb43-4fe4-a72a-f54ebe3153c1.png&quot;&gt;&lt;img alt=&quot;Cross compilation from Mac, Linux, and Windows to eachother on all major architectures.&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137650099-cd370046-eb43-4fe4-a72a-f54ebe3153c1.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This involved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hexops/sdk-macos-11.3&quot;&gt;Packaging MacOS SDKs&lt;/a&gt; and &lt;a href=&quot;https://github.com/hexops/sdk-linux-x86_64&quot;&gt;Linux system X11/Wayland libraries&lt;/a&gt; into SDKs, and creating Zig build scripts that could merely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; them and utilize them for cross-compilation.&lt;/li&gt;
  &lt;li&gt;Purchasing Apple M1 hardware to test on, and for GitHub Actions as it doesn’t support it.&lt;/li&gt;
  &lt;li&gt;Normalizing symlinks in Mac/Linux SDKs everywhere so that Windows users don’t have a hard time with Git symlink management.&lt;/li&gt;
  &lt;li&gt;Contributing &lt;a href=&quot;https://github.com/ziglang/zig/pull/9734&quot;&gt;a small fix to the Zig linker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this to say, we’re really taking a holistic approach to achieve this.&lt;/p&gt;

&lt;h2 id=&quot;whats-next-webgpu&quot;&gt;What’s next? WebGPU&lt;/h2&gt;

&lt;p&gt;I’m happy to report that a fair amount of progress on this front has been made.&lt;/p&gt;

&lt;p&gt;Here is Google’s WebGPU implementation, Dawn, compiled using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zig&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137650403-290c6a94-7ee4-44be-8ed0-94f96adcde4e.png&quot;&gt;&lt;img alt=&quot;A red triangle in a black window titled 'Dawn Window', the&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137650403-290c6a94-7ee4-44be-8ed0-94f96adcde4e.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137650621-f304f20b-5f74-4a3d-956d-7feb3838351d.png&quot;&gt;&lt;img alt=&quot;A Zig code file, hello_triangle.zig showing Dawn and WebGPU API usage in Zig&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137650621-f304f20b-5f74-4a3d-956d-7feb3838351d.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A ~500 line port of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello_triangle&lt;/code&gt; example from Dawn to Zig&lt;/li&gt;
  &lt;li&gt;A ~1200 line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.zig&lt;/code&gt; file which compiles all the Dawn sources using Zig, without using Google’s ninja/etc development tools.&lt;/li&gt;
  &lt;li&gt;A hack to workaround a bug in Zig where ObjC++ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mm&lt;/code&gt; files are not yet recognized.&lt;/li&gt;
  &lt;li&gt;C shims for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dawn_native&lt;/code&gt; C++ API and utility APIs, which are required in order to bind Dawn to an actual GLFW window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a few weeks of work to do before this can be merged and will be usable by others, please stay tuned for that.&lt;/p&gt;

&lt;p&gt;After that will be development of idiomatic Zig bindings to the &lt;a href=&quot;https://github.com/webgpu-native/webgpu-headers&quot;&gt;WebGPU C API&lt;/a&gt; which is shared between implementations such as Dawn and the Rust’s &lt;a href=&quot;https://github.com/gfx-rs/wgpu-native&quot;&gt;gfx-rs/wgpu-native&lt;/a&gt; implementation (we could theoretically switch between them at startup in the future, but we’ll probably stick with Dawn as it does not require a separate Rust toolchain and it would prevent out-of-the-box cross compilation.)&lt;/p&gt;

&lt;h2 id=&quot;when-will-there-be-games-examples-etc&quot;&gt;When will there be games, examples, etc.?&lt;/h2&gt;

&lt;p&gt;It’ll be a while because I am focusing purely on the groundwork first. It’s unlikely you’ll see anything with &lt;em&gt;real demo value&lt;/em&gt; before later next year.&lt;/p&gt;

&lt;p&gt;I’m sure that will be disheartening to hear - and may make you to think there’s nothing of substance here. I totally understand that view, but I hope you’ll stay tuned because I’m in this for the long haul and it’s not my first rodeo (I previously spent 4 years writing &lt;a href=&quot;https://azul3d.org&quot;&gt;a game engine in Go&lt;/a&gt;, and have worked &lt;a href=&quot;https://sourcegraph.com&quot;&gt;at a devtools startup for 7 years&lt;/a&gt;, with my biggest lesson from of those experiences being the importance of demos and examples.&lt;/p&gt;

&lt;h2 id=&quot;follow-along&quot;&gt;Follow along&lt;/h2&gt;

&lt;p&gt;Major developments will be posted here, as well as on Twitter &lt;a href=&quot;https://twitter.com/machengine&quot;&gt;@machengine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also follow the project at &lt;a href=&quot;https://github.com/hexops/mach&quot;&gt;github.com/hexops/mach&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like what I’m doing, you can &lt;a href=&quot;https://github.com/sponsors/slimsag&quot;&gt;sponsor me on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="mach," />
      
        <category term="zig," />
      
        <category term="gamedev," />
      
        <category term="graphics" />
      

      

      
        <summary type="html">In the coming months, we’ll begin to have truly cross-platform low-level graphics, with the ability to cross compile GPU-accelerated applications written in Zig from any OS and deploy to desktop, mobile, and (in the future) web.</summary>
      

      
      
        
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/3173176/137651926-3734c3b2-4875-47de-b42f-0ece854756f7.png" />
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">I write code 100 hours/week, here’s why I probably won’t stop</title>
      
      
      <link href="/2021/I-write-code-100-hours-a-week" rel="alternate" type="text/html" title="I write code 100 hours/week, here's why I probably won't stop" />
      
      <published>2021-10-16T00:00:00+00:00</published>
      <updated>2021-10-16T00:00:00+00:00</updated>
      <id>/2021/I-write-code-100-hours-a-week</id>
      <content type="html" xml:base="/2021/I-write-code-100-hours-a-week">&lt;p&gt;I write code 100 hours/week. I’ve done so for the last 2 years and, excluding a life-altering event (illness?) I probably won’t stop.&lt;/p&gt;

&lt;h2 id=&quot;the-average-week&quot;&gt;The average week&lt;/h2&gt;

&lt;p&gt;I typically spend around:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;48h/week @ &lt;a href=&quot;https://sourcegraph.com&quot;&gt;day job, Sourcegraph, building developer tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;55h/week &lt;a href=&quot;https://github.com/slimsag&quot;&gt;coding in Zig&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;7h/day sleeping&lt;/li&gt;
  &lt;li&gt;9h/week caring for self, chores, etc.&lt;/li&gt;
  &lt;li&gt;5h/week games or chatting with friends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes coding drops to around 80h/week if I feel I need more sleep, time for something else, or if I’m just not feeling it.&lt;/p&gt;

&lt;h2 id=&quot;my-calendar&quot;&gt;My calendar&lt;/h2&gt;

&lt;p&gt;My days are pretty fluid, I don’t maintain a strict calendar - but an average week does pretty much look identical to the following. (click to expand)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137576033-f7fa007c-db94-4b1c-9d9d-05440da118d7.png&quot;&gt;&lt;img alt=&quot;my calendar&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137576033-f7fa007c-db94-4b1c-9d9d-05440da118d7.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Green is open-source coding in Zig&lt;/li&gt;
  &lt;li&gt;Red is time spent at day job&lt;/li&gt;
  &lt;li&gt;Yellow is sleep&lt;/li&gt;
  &lt;li&gt;Blue is being human&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thats-not-sustainable&quot;&gt;“That’s not sustainable”&lt;/h2&gt;

&lt;p&gt;I’ve been doing it for 2 years now with no issues - if anything, I’m more inclined to continue doing it. I like it.&lt;/p&gt;

&lt;p&gt;When I started doing this two years ago, age 25, it was a shift from “I work and spend my free time goofing off” to “I work and spend my free time focusing on what I want to achieve in life”.&lt;/p&gt;

&lt;p&gt;It wasn’t until 1.5 years later that I actually felt comfortable even talking about this publicly or to co-workers. It sounds ridiculous, and what if e.g. I have a bad week at work or something? If I was a manager, I’d certainly wonder if it was due to my report doing this (happy to report no issues!)&lt;/p&gt;

&lt;p&gt;I’ve been &lt;a href=&quot;http://slimsag.com/&quot;&gt;coding for nearly 10 years professionally&lt;/a&gt;, turning 28 soon. The older I get, the more I seem to enjoy this. It was never an instantaneous shift, but rather a gradual one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137580436-e79a7b21-8aca-4b66-9895-808b8ffa2d38.png&quot;&gt;&lt;img alt=&quot;How my coding has increased to an insane amount over time&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137580436-e79a7b21-8aca-4b66-9895-808b8ffa2d38.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve worked at &lt;a href=&quot;https://sourcegraph.com&quot;&gt;the same startup&lt;/a&gt; for the past ~7 years - and I’ve certainly experienced early-stage startup lifestyle - with all the crunch that comes with that.&lt;/p&gt;

&lt;p&gt;So it’s not like I’ve just never experienced conditions that &lt;em&gt;should lead to burnout before&lt;/em&gt;-it’s just that &lt;em&gt;I’m not sure I truly understand what people mean when they say burnout&lt;/em&gt;. I think it might often be used to express a feeling of “I’m no longer interested in the work I do at my tech job, but I like the benefits and I’m paid stupid amounts of money - so saying that feels weird! What do I do?” - and I just haven’t been in that situation before.&lt;/p&gt;

&lt;h2 id=&quot;youre-going-to-burnout&quot;&gt;“You’re going to burnout”&lt;/h2&gt;

&lt;p&gt;I hear this from people who often bring me other &lt;em&gt;grumbling messages of distaste and hatred&lt;/em&gt; (hello /r/programmingcirclejerk! 😃 happy to say I’m a lurker these days and get much enjoyment from you.)&lt;/p&gt;

&lt;p&gt;I think you’ve just misunderstand, though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137581300-987f4272-79f0-444c-a0e3-007474cb1f5b.png&quot;&gt;&lt;img alt=&quot;Normal people vs. me: kids/family/fun vs. coding&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137581300-987f4272-79f0-444c-a0e3-007474cb1f5b.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have children or a significant other, think how much time you spend with them. Do you get burnt out from it? I’d be willing to bet that you take breaks from time to time, but I think most would say no.&lt;/p&gt;

&lt;p&gt;Now replace you children or significant other with a high-stress environment - let’s say you spend the same amount of time with co-workers instead of your kids or significant other. That’s some nightmare fuel!&lt;/p&gt;

&lt;p&gt;This is analogous to how I feel: If I was working 100h/week at my day job, I would &lt;em&gt;absolutely&lt;/em&gt; burn out. I think that’s what people hear when I say this. But that’s not what I’m doing: I work a regular programming day job like everyone else - it’s at a late-stage, fairly relaxed startup and with a good work/life balance. It’s just that I choose to spend the “life” part of that balance doing what I truly love: coding towards some serious aspirations.&lt;/p&gt;

&lt;h2 id=&quot;nobody-is-productive-writing-code-that-long&quot;&gt;“Nobody is productive writing code that long”&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Working on the right problem to take advantage of your current metal state&lt;/em&gt; is how you make true progress. Or, at least, that’s how I see it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137578255-ab0087e7-f552-44e5-987a-4cfdc2caef8f.png&quot;&gt;&lt;img alt=&quot;What I work on depending on mental state&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137578255-ab0087e7-f552-44e5-987a-4cfdc2caef8f.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But “how one could have so many projects lined up, enough to make switching between them always an option?” that’s because I have some lofty life goals (or an addiction to trying to attain the unattainable, I’ll let you choose.)&lt;/p&gt;

&lt;p&gt;I’m working double-time on a secret ten-year vision to upend the gaming industry. Part of that includes a commitment I’ve made to build the following in Zig:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;a href=&quot;https://github.com/hexops/mach&quot;&gt;game engine for the future&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Better developer tools (not just for game developers)&lt;/li&gt;
  &lt;li&gt;Several real video games, which I believe can be competitive with what AAA studios offer today.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s not like I’m delusional about how hard that will be: I spent &lt;a href=&quot;http://azul3d.org&quot;&gt;4 years previously writing a game engine in Go&lt;/a&gt;. I spent the last 7 years of my life working on developer tools at Sourcegraph. I spent most of my teenage years completely failing to create video games in various game engines.&lt;/p&gt;

&lt;p&gt;I know how hard and time consuming it is. My vision requires only time and diligence.&lt;/p&gt;

&lt;h2 id=&quot;you-dont-have-a-life&quot;&gt;“You don’t have a life”&lt;/h2&gt;

&lt;p&gt;We all choose the life we love, and I enjoy the heck out of mine. Grew up in a family of 6 - we laugh together because we all know my life choices are crazy (who adopts 9 cats? yes I’m &lt;em&gt;that person&lt;/em&gt; too.)&lt;/p&gt;

&lt;p&gt;It’s absolutely not normal; but it’s also probably far from the “lone 20 year old in a basement who has not showered for weeks and is anti-social” that you’re picturing.&lt;/p&gt;

&lt;p&gt;I do spend time with family, and recently my new nephew. I chat with friends online, I play games every week. I go to the dentist, I take care of myself. I take care of my cats, and spoil them in ways you can’t really fathom.&lt;/p&gt;

&lt;p&gt;The reason I can spend so much time doing what I love is because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I don’t have kids, nor a significant other. That’s a tradeoff.&lt;/li&gt;
  &lt;li&gt;I get groceries delivered, I’d rather spend the time coding.&lt;/li&gt;
  &lt;li&gt;I make sure I have deep technical problems I need to think through and solve, and solve it &lt;em&gt;while&lt;/em&gt; I am making meals, eating, or doing chores.&lt;/li&gt;
  &lt;li&gt;I run 6 miles many days of the week to keep healthy. I do it while writing code, using a standing desk treadmill.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of my time is spent in a large, luxurious ~2500 sq/ft home. Just me and my 9 cats all living like monarchs, cozy and coding away at my dreams.&lt;/p&gt;

&lt;p&gt;I regret nothing. If I die this way, I’d go out happy.&lt;/p&gt;

&lt;h2 id=&quot;thats-not-healthy&quot;&gt;“That’s not healthy”&lt;/h2&gt;

&lt;p&gt;It’s completely 100% OK if at this point you’re just feeling a bit like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/3173176/137579019-f8313501-5024-48db-83e6-2abe30c78337.png&quot;&gt;&lt;img height=&quot;250px&quot; alt=&quot;Well I don't like that&quot; class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/137579019-f8313501-5024-48db-83e6-2abe30c78337.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know this lifestyle isn’t for everyone. It’s not for you.&lt;/p&gt;

&lt;p&gt;And I don’t think it makes me “exceptional” (in a better-than-you way). I’m just a people, struggling with a very different lifestyle than you.&lt;/p&gt;

&lt;p&gt;I feel strongly you should never feel &lt;em&gt;compelled&lt;/em&gt; or &lt;em&gt;required&lt;/em&gt; to do what I am doing. Any company, manager, or person asking you to do so is &lt;em&gt;horrible&lt;/em&gt; and you should get out quick. I don’t want to contribute to that culture or feed it.&lt;/p&gt;

&lt;p&gt;But-I love what I’m doing. I love the amount of progress I’m able to achieve every day. I love my time spent solving problems. I love &lt;a href=&quot;http://slimsag.com&quot;&gt;what I’ve achieved so far&lt;/a&gt;. I want to go further than ever before - I’ve been marathon coding for as long as I can remember, and I’m not going to stop. I &lt;em&gt;need&lt;/em&gt; to see how far I can go.&lt;/p&gt;

&lt;p&gt;I love the choices I’ve made in life. I hope you love yours too.&lt;/p&gt;

&lt;h2 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading&lt;/h2&gt;

&lt;p&gt;Please send your hate to &lt;a href=&quot;https://twitter.com/slimsag&quot;&gt;@slimsag&lt;/a&gt; on Twitter or to the comments section wherever this ends up, I’ll see you there! 😉&lt;/p&gt;

&lt;p&gt;If you liked this, you might also like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;2021-04-10-increasing-my-contribution-to-zig-to-200-a-month.md&quot;&gt;My game development journey &amp;amp; why I’m increasing my contribution to Zig to $200/mo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="programming," />
      
        <category term="lifestyle" />
      

      

      
        <summary type="html">I write code 100 hours/week. I’ve done so for the last 2 years and, excluding a life-altering event (illness?) I probably won’t stop.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Unicode data file compression: achieving 40-70% reduction over gzip alone</title>
      
      
      <link href="/2021/unicode-data-file-compression" rel="alternate" type="text/html" title="Unicode data file compression: achieving 40-70% reduction over gzip alone" />
      
      <published>2021-07-03T00:00:00+00:00</published>
      <updated>2021-07-03T00:00:00+00:00</updated>
      <id>/2021/unicode-data-file-compression</id>
      <content type="html" xml:base="/2021/unicode-data-file-compression">&lt;p&gt;A little story about how writing a domain-specific compression algorithm in a few days can sometimes yield big benefits, why it’s sometimes worth giving it a shot, and how to tell when you should try. Note: this is about Unicode spec data files, not general purpose text compression.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#problem&quot;&gt;Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#investigation&quot;&gt;Investigation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#binary-encoding&quot;&gt;Binary encoding?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#differential-encodingcompression&quot;&gt;Differential encoding/compression?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#go-implementation&quot;&gt;Go implementation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#zig-implementation&quot;&gt;Zig implementation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#differential-encoding-state-machine&quot;&gt;Differential encoding state machine&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#a-stream-of-op-codes&quot;&gt;A stream of op codes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#iteratively-finding-the-most-lucrative-opcodes&quot;&gt;Iteratively finding the most lucrative opcodes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#a-stream-of-opcodes-for-a-state-machine-a-natural-progression-from-a-binary-format&quot;&gt;A stream of opcodes for a state machine: a natural progression from a binary format?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#results-better-than-gzipbrotli-and-even-better-with-them&quot;&gt;Results? Better than gzip/brotli; and even better &lt;em&gt;with&lt;/em&gt; them!&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#why-test-with-gzipbrotli-but-not-others&quot;&gt;Why test with gzip/brotli but not others?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-complex-is-the-implementation&quot;&gt;How complex is the implementation?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#notable-mention&quot;&gt;Notable mention&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Two weeks ago, I began using &lt;a href=&quot;https://github.com/jecolon/ziglyph&quot;&gt;Ziglyph&lt;/a&gt; (“Unicode processing with Zig, and a UTF-8 string type: Zigstr.”) - an awesome library by &lt;a href=&quot;https://github.com/jecolon&quot;&gt;@jecolon&lt;/a&gt;, for grapheme cluster sorting in &lt;a href=&quot;https://github.com/hexops/zorex&quot;&gt;Zorex, an omnipotent regexp engine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don’t personally have any prior experience working with the lower level details of Unicode, or compression algorithms for that matter.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;As I stumbled into the wondrous world that is Unicode text sorting (see also my article: &lt;a href=&quot;2021-06-27-unicode-sorting-why-browsers-added-special-emoji-matching.md&quot;&gt;Unicode sorting is hard &amp;amp; why browsers added special emoji matching to regexp&lt;/a&gt;) and began using Ziglyph, I came across an issue: the standard Unicode collation algorithm, which Ziglyph implements, depends on some large Unicode data tables for normalization and sort keys - even gzipped these were fairly large:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexops-mac:zorex slimsag&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;du&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sh&lt;/span&gt; asset/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
308K	asset/uca-allkeys.txt.gz
260K	asset/ucd-UnicodeData.txt.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These file sizes may seem small, but one of my goals is to make Zorex a real competitor to e.g. a browser’s native regexp engine. That’s challenging because WebAssembly bundle sizes matter &lt;em&gt;a lot&lt;/em&gt; in that context, and using the browser’s regexp implementation is virtually free.&lt;/p&gt;

&lt;h2 id=&quot;investigation&quot;&gt;Investigation&lt;/h2&gt;

&lt;p&gt;I set out to try and reduce the size of these data files. First I &lt;a href=&quot;https://github.com/jecolon/ziglyph/issues/3&quot;&gt;opened an issue and asked&lt;/a&gt; if anyone else had thoughts around reducing the size of this data. The author of Ziglyph &lt;a href=&quot;https://github.com/jecolon&quot;&gt;@jecolon&lt;/a&gt; is awesome and readily had some ideas and was able to reduce the two files substantially by removing unnecessary data (such as comments, etc.)&lt;/p&gt;

&lt;p&gt;Curious how much further we could go, I kept squinting at the data files (warning: large):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.unicode.org/Public/UCA/latest/allkeys.txt&lt;/li&gt;
  &lt;li&gt;http://www.unicode.org/Public/UNIDATA/UnicodeData.txt&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;binary-encoding&quot;&gt;Binary encoding?&lt;/h3&gt;

&lt;p&gt;My first thoughts were that a binary encoding would likely reduce the size a lot. I pulled in some help from Hobbyist reverse engineer &lt;a href=&quot;https://github.com/Andoryuuta&quot;&gt;@Andoryuuta&lt;/a&gt; and he got started on a binary encoding for UnicodeData.txt based on the spec. With that, he was able to reduce the original 1.9M allkeys.txt file down to 250K (125K gzipped) - quite a win.&lt;/p&gt;

&lt;h3 id=&quot;differential-encodingcompression&quot;&gt;Differential encoding/compression?&lt;/h3&gt;

&lt;p&gt;My secondary thought was that, scrolling through these data files it was obvious most entries were derived from prior entries. Many entries were long runs of data where the next entry had the same value, plus a small increment. For example, at the start of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allkeys.txt&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0000  ; [.0000.0000.0000] # NULL (in ISO 6429)
0001  ; [.0000.0000.0000] # START OF HEADING (in ISO 6429)
0002  ; [.0000.0000.0000] # START OF TEXT (in ISO 6429)
0003  ; [.0000.0000.0000] # END OF TEXT (in ISO 6429)
0004  ; [.0000.0000.0000] # END OF TRANSMISSION (in ISO 6429)
0005  ; [.0000.0000.0000] # ENQUIRY (in ISO 6429)
0006  ; [.0000.0000.0000] # ACKNOWLEDGE (in ISO 6429)
0007  ; [.0000.0000.0000] # BELL (in ISO 6429)
0008  ; [.0000.0000.0000] # BACKSPACE (in ISO 6429)
000E  ; [.0000.0000.0000] # SHIFT OUT (in ISO 6429)
000F  ; [.0000.0000.0000] # SHIFT IN (in ISO 6429)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, not all sections are so sequential. Many sections are a bit more arbitrary:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FF9A  ; [.4304.0020.0012] # HALFWIDTH KATAKANA LETTER RE
32F9  ; [.4304.0020.0013] # CIRCLED KATAKANA RE
3355  ; [.4304.0020.001C][.42FB.0020.001C] # SQUARE REMU
3356  ; [.4304.0020.001C][.430A.0020.001C][.42EE.0020.001C][.42E3.0020.001C][.0000.0037.001C][.430A.0020.001C] # SQUARE RENTOGEN
308D  ; [.4305.0020.000E] # HIRAGANA LETTER RO
31FF  ; [.4305.0020.000F] # KATAKANA LETTER SMALL RO
30ED  ; [.4305.0020.0011] # KATAKANA LETTER RO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Still, there are obvious patterns one can see in the way these values change.&lt;/p&gt;

&lt;h3 id=&quot;go-implementation&quot;&gt;Go implementation&lt;/h3&gt;

&lt;p&gt;I did a quick hacky Go implementation of differential encoding on these files to see how well that would work. The results were pretty good, and already beat just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gzip -9&lt;/code&gt; compression of the files:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File&lt;/th&gt;
      &lt;th&gt;Original&lt;/th&gt;
      &lt;th&gt;Original + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gzip -9&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;My compression&lt;/th&gt;
      &lt;th&gt;My compression + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gzip -9&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Decompositions.txt&lt;/td&gt;
      &lt;td&gt;72K&lt;/td&gt;
      &lt;td&gt;28K&lt;/td&gt;
      &lt;td&gt;48K&lt;/td&gt;
      &lt;td&gt;12K&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;allkeys-minimal.txt&lt;/td&gt;
      &lt;td&gt;500K&lt;/td&gt;
      &lt;td&gt;148K&lt;/td&gt;
      &lt;td&gt;204K&lt;/td&gt;
      &lt;td&gt;36K&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;However, because I chose to do these experiments in Go I found a number of inefficiencies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There were a lot of locations where I encoded things as 8-bit unsigned integers (Go’s smallest value type) instead of a more optimal 4-bit unsigned integer. I could’ve done bit shifting, but it would’ve been annoying.&lt;/li&gt;
  &lt;li&gt;There were also many places where I encoded Unicode codepoints as 32-bit unsigned integers, rather than a more optimal 21-bit unsigned integer (because valid Unicode codepoints do not exceed that range.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a real implementation, I switched over to Zig.&lt;/p&gt;

&lt;h2 id=&quot;zig-implementation&quot;&gt;Zig implementation&lt;/h2&gt;

&lt;p&gt;Actually, two things made working on this in Zig much easier than in Go:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Zig has variable bit-width integers: I could just write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u4&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u21&lt;/code&gt; values instead of needing to handle bit packing within larger size integers myself. That was &lt;em&gt;nice&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;In the Zig standard library it provides:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourcegraph.com/github.com/ziglang/zig@0.8.0/-/blob/lib/std/io/bit_writer.zig?L152-202&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.io.BitWriter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourcegraph.com/github.com/ziglang/zig@0.8.0/-/blob/lib/std/io/bit_reader.zig?L176-248&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.io.BitReader&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these two features, it became incredibly easy to write the most optimal bit-packed encoding of the data.&lt;/p&gt;

&lt;p&gt;In fact, the basic uncompressed binary format &lt;a href=&quot;https://github.com/jecolon/ziglyph/pull/7/commits/7d4042d8df21cc11eaf42177c2f4d9b3afd9c4a7&quot;&gt;was only a few lines to encode&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compressTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DecompFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anytype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf_writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bufferedWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bitWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Little&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writeBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;@intCast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writeBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;key_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;key_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writeBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;@enumToInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@bitSizeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writeBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writeBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flushBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;differential-encoding-state-machine&quot;&gt;Differential encoding state machine&lt;/h3&gt;

&lt;p&gt;To handle the compression, I started out &lt;em&gt;really&lt;/em&gt; simple. First I encoded just a binary version of the data with no compression. The most important thing was to get to a point where I could start testing some theories about what would compress the data really well, and validate that it was in fact being losslessly compressed/decompressed without issues via tests:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;compression_is_lossless&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Compress UnicodeData.txt -&amp;gt; Decompositions.bin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;src/data/ucd/UnicodeData.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deinit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compressToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/data/ucd/Decompositions.bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Reset the raw file iterator.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Decompress the file.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decompressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decompressFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;src/data/ucd/Decompositions.bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decompressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deinit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decompressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expectEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;a-stream-of-op-codes&quot;&gt;A stream of op codes&lt;/h3&gt;

&lt;p&gt;I settled on a really simple idea: these data files all have basically just a variable number of integers per line. And if I kept “registers” representing the current value for each integer, I could determine the difference between the past line and the subsequent one to produce a difference. If I encoded that difference as a stream of opcodes with associative data, then to decompress the file I could simply “replay” those operations based on the opcodes and then iteratively come up with more finely-specified, specific opcodes to handle specific types of data.&lt;/p&gt;

&lt;p&gt;I started out simple, really just with two opcodes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Zig&quot;&gt;// A UDDC opcode for a decomposition file.
const Opcode = enum(u4) {
    // Sets all the register values with no compression.
    set,

    // Denotes the end of the opcode stream. This is so that we don't need to encode the total
    // number of opcodes in the stream up front (note also the file is bit packed: there may be
    // a few remaining zero bits at the end as padding so we need an EOF opcode rather than say
    // catching the actual file read EOF.)
    eof,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using these two opcodes, I was able to effectively encode the entire file. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt; opcode had some associative data which effectively expressed an entire raw, uncompressed entry in the file (one line.) This increased the file size since it was effectively just adding 4 bits (the opcode) as additional overhead.&lt;/p&gt;

&lt;h3 id=&quot;iteratively-finding-the-most-lucrative-opcodes&quot;&gt;Iteratively finding the most lucrative opcodes&lt;/h3&gt;

&lt;p&gt;To find the most lucrative (i.e. compressed) opcodes, I printed the data I would associate with an opcode (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt;) and then looked for repetitions. Sometimes manually, and sometimes by e.g. piping data to a combination of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort|uniq -c|sort -r&lt;/code&gt; to find common patterns.&lt;/p&gt;

&lt;p&gt;Since I was printing &lt;em&gt;differences&lt;/em&gt; between e.g. the current value and previous value, it was really easy to find common patterns that appeared in the file very frequently, such as specific fields incrementing by specific amounts with one field being arbitrary:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c&quot;&gt;// increments key[3] += 1; sets value.seq[0]; emits an entry.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// 1685 instances&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;increment_key_3_and_set_value_seq_0_and_emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once I had narrowed down to a larger group of opcodes that more specifically represented the data, I was able to print the number of bits required to store the change in specific fields (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.seq[0]&lt;/code&gt;) and add even more specific opcodes to use variable bit widths:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c&quot;&gt;// increments key[3] += 1; sets value.seq[0]; emits an entry.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// 1685 instances&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;increment_key_3_and_set_value_seq_0_2bit_and_emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 978 instances, 2323 byte reduction&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;increment_key_3_and_set_value_seq_0_8bit_and_emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 269 instances, 437 byte reduction&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;increment_key_3_and_set_value_seq_0_21bit_and_emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 438 instances&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It being a stream of opcodes was quite nice, because it allowed me to determine how much space was being consumed by a given opcode in sum and target further reducing the size of opcodes that took up the most space. It also made it really easy to find opcodes that I though &lt;em&gt;might&lt;/em&gt; help, but in practice turned out to not be that frequent. Just print them, pipe to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort|uniq -c|sort -r&lt;/code&gt; to count them - and remove the lowest hanging fruit.&lt;/p&gt;

&lt;h3 id=&quot;a-stream-of-opcodes-for-a-state-machine-a-natural-progression-from-a-binary-format&quot;&gt;A stream of opcodes for a state machine: a natural progression from a binary format?&lt;/h3&gt;

&lt;p&gt;I chose an opcode stream for a reason: so that I could encode some complex logic in the form of a state machine. This came in handy for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allkeys.txt&lt;/code&gt; file in specific, as it allowed me to introduce &lt;em&gt;incrementors&lt;/em&gt; into the mix which would &lt;em&gt;increment register values by a chosen amount each iteration (value “emission”)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The final opcodes for the allkeys.txt file ended up being:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// A UDDC opcode for an allkeys file.
const Opcode = enum(u3) {
    // Sets an incrementor for the key register, incrementing the key by this much on each emission.
    // 10690 instances, 13,480.5 bytes
    inc_key,

    // Sets an incrementor for the value register, incrementing the value by this much on each emission.
    // 7668 instances, 62,970 bytes
    inc_value,

    // Emits a single value.
    // 31001 instances, 15,500.5 bytes
    emit_1,
    emit_2,
    emit_4,
    emit_8,
    emit_32,

    // Denotes the end of the opcode stream. This is so that we don't need to encode the total
    // number of opcodes in the stream up front (note also the file is bit packed: there may be
    // a few remaining zero bits at the end as padding so we need an EOF opcode rather than say
    // catching the actual file read EOF.)
    eof,
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This meant I could determine the difference in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; fields (what those actually are isn’t important, just that they are all minor incremental differences on the prior entry in the file) - set an &lt;em&gt;incrementor&lt;/em&gt; to do some work on each emission, such as say increment the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; array by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[0, 1, 5]&lt;/code&gt; each emission, and then say “now emit_32 values!”.&lt;/p&gt;

&lt;p&gt;Suddenly, instead of encoding 32 key entries (32 * 3 key values * 21 bits) I am just setting an incrementor (3 key values * 21 bits) and a single opcode to emit 32 values (3 bits).&lt;/p&gt;

&lt;p&gt;Overall, this gave me a very nice, natural-feeling progression from a “raw binary format” to something a bit more specific - a bit more &lt;em&gt;compressed.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;results-better-than-gzipbrotli-and-even-better-with-them&quot;&gt;Results? Better than gzip/brotli; and even better &lt;em&gt;with&lt;/em&gt; them!&lt;/h2&gt;

&lt;p&gt;For lack of better words, I’ll call my compression algorithm here Unicode Data Differential Compression, since it’s differential and specifically for the Unicode data table files - or UDDC for short.&lt;/p&gt;

&lt;p&gt;The two files went from the original 568K (with gzip) down to just 61K (with UDDC+gzip). With this, we are able to equal or match both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gzip -9&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brotli -9&lt;/code&gt; on their own, AND when combined with gzip or brotli we are able to reduce by 40-70%:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File&lt;/th&gt;
      &lt;th&gt;Before (bytes)&lt;/th&gt;
      &lt;th&gt;After (bytes)&lt;/th&gt;
      &lt;th&gt;Change&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decompositions.bin&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;48,242&lt;/td&gt;
      &lt;td&gt;19,072&lt;/td&gt;
      &lt;td&gt;-60.5% (-29,170 bytes)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decompositions.bin.br&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;24,411&lt;/td&gt;
      &lt;td&gt;14,783&lt;/td&gt;
      &lt;td&gt;-39.4% (-9,628 bytes)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decompositions.bin.gz&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;30,931&lt;/td&gt;
      &lt;td&gt;15,670&lt;/td&gt;
      &lt;td&gt;-49.34% (15,261 bytes)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allkeys.bin&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;373,719&lt;/td&gt;
      &lt;td&gt;100,907&lt;/td&gt;
      &lt;td&gt;-73.0% (-272,812 bytes)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allkeys.bin.br&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;108,982&lt;/td&gt;
      &lt;td&gt;44,860&lt;/td&gt;
      &lt;td&gt;-58.8% (-64,122 bytes)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allkeys.bin.gz&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;163,237&lt;/td&gt;
      &lt;td&gt;46,996&lt;/td&gt;
      &lt;td&gt;-71.2% (-116,241 bytes)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Before represents binary format without UDDC compression.&lt;/li&gt;
  &lt;li&gt;After represents binary format with UDDC compression.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.br&lt;/code&gt; represents &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brotli -9 &amp;lt;file&amp;gt;&lt;/code&gt; compression&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gz&lt;/code&gt; represents &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gzip -9 &amp;lt;file&amp;gt;&lt;/code&gt; compression&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-test-with-gzipbrotli-but-not-others&quot;&gt;Why test with gzip/brotli but not others?&lt;/h3&gt;

&lt;p&gt;I chose to compare against gzip/brotli specifically because you get those effectively for free in WebAssembly: browsers already know how to decompress those and ship with gzip/brotli decompressors - so you can use them for free without shipping any additional code.&lt;/p&gt;

&lt;h3 id=&quot;how-complex-is-the-implementation&quot;&gt;How complex is the implementation?&lt;/h3&gt;

&lt;p&gt;The final implementation for both files is only a few hundred lines (excluding blank lines, comments, and tests):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jecolon/ziglyph/blob/main/src/collator/AllKeysFile.zig&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllKeysFile.zig&lt;/code&gt;&lt;/a&gt;: 298 lines&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jecolon/ziglyph/blob/main/src/normalizer/DecompFile.zig&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecompFile.zig&lt;/code&gt;&lt;/a&gt; 336 lines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have not measured produced machine code size yet, but suspect it is relatively negligible compared to the gains.&lt;/p&gt;

&lt;h2 id=&quot;notable-mention&quot;&gt;Notable mention&lt;/h2&gt;

&lt;p&gt;I should mention that the Unicode spec, as &lt;a href=&quot;https://github.com/jecolon&quot;&gt;@jecolon&lt;/a&gt; pointed out to me, does suggest ways to reduce sort key lengths and implement Run-length Compression:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://unicode.org/reports/tr10/#Reducing_Sort_Key_Lengths&lt;/li&gt;
  &lt;li&gt;https://unicode.org/reports/tr10/#Run-length_Compression&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wasn’t able to locate an implementation of this (I’d be curious to compare results!) but suspect that, as the run-length compression does not fit the data as tightly, it would not compress quite as well (although would handle any major changes to the type of data in the files without requiring compression algorithm changes better.)&lt;/p&gt;

&lt;p&gt;Also of note is that their algorithm only seems to be mentioned in the context of allkeys.txt / the Unicode Collation Algorithm, not in the context of normalization/decompositions from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnicodeData.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ask questions, stay curious, don’t be afraid to experiment even if it’s outside of your domain of expertise. You might surprise yourself and find something interesting, challenging, and worthwhile.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="unicode," />
      
        <category term="compression" />
      

      

      
        <summary type="html">A little story about how writing a domain-specific compression algorithm in a few days can sometimes yield big benefits, why it’s sometimes worth giving it a shot, and how to tell when you should try. Note: this is about Unicode spec data files, not general purpose text compression.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">CLAs are not for open source, use a Developer Certificate of Origin</title>
      
      
      <link href="/2021/cla-not-for-open-source-use-a-developer-certificate-of-origin" rel="alternate" type="text/html" title="CLAs are not for open source, use a Developer Certificate of Origin" />
      
      <published>2021-07-01T00:00:00+00:00</published>
      <updated>2021-07-01T00:00:00+00:00</updated>
      <id>/2021/cla-not-for-open-source-use-a-developer-certificate-of-origin</id>
      <content type="html" xml:base="/2021/cla-not-for-open-source-use-a-developer-certificate-of-origin">&lt;p&gt;Startups trying to embrace open source today readily adopt Contributor License Agreements (CLAs) as mandatory requirements for contributing. This is not in the spirit of OSS, and you should use a Developer Certificates of Origin (DCO) instead.&lt;/p&gt;

&lt;h2 id=&quot;update-2021-07-01-546pm-mst&quot;&gt;Update: 2021-07-01 5:46pm MST&lt;/h2&gt;

&lt;p&gt;A professional lawyer I look up to has &lt;a href=&quot;https://lobste.rs/s/lvmb5i/clas_are_not_for_open_source_use_developer#c_n2k3zd&quot;&gt;rebuked this article and stated it contains worrisome amounts of misinformation&lt;/a&gt;. I encourage reading that thread, and also &lt;a href=&quot;https://writing.kemitchell.com/2018/01/06/CLAs-Are-Not-a-Sham.html&quot;&gt;the article he has written&lt;/a&gt; instead.&lt;/p&gt;

&lt;h2 id=&quot;why-do-we-need-either-an-imaginary-tale-of-emulators&quot;&gt;Why do we need either? An imaginary tale of emulators&lt;/h2&gt;

&lt;p&gt;Let’s say you work on a Playstation emulator. Someone who finds your work interesting begins sending you contributions on GitHub.&lt;/p&gt;

&lt;p&gt;Unbeknownst to you, that person actually works at Sony. They didn’t realize this, but their contributions in their spare time are &lt;em&gt;not owned by them&lt;/em&gt; and Sony’s lawyers now want to sue you for using their proprietary, patented technology.&lt;/p&gt;

&lt;p&gt;If you didn’t get a written statement from that person saying they owned those contributions, and actually intended to release them under your open source license terms - then you could indeed be found in the wrong!&lt;/p&gt;

&lt;p&gt;Now, you might want to argue that the mere act of &lt;em&gt;sending a pull request&lt;/em&gt; meant implicitly that the author intended to do that, but realize that is an &lt;em&gt;untested legal ground&lt;/em&gt;. We don’t know how a court would rule in that case.&lt;/p&gt;

&lt;p&gt;This is one of the problems that CLAs and DCOs are used to solve: it makes that agreement explicit.&lt;/p&gt;

&lt;h2 id=&quot;why-clas-are-terrible-for-open-source&quot;&gt;Why CLAs are terrible for open source&lt;/h2&gt;

&lt;p&gt;If you’re contributing under a CLA, you are more frequently ‘giving the company your code’ not ‘releasing it as open source’.&lt;/p&gt;

&lt;p&gt;CLAs are arbitrary legal agreements drafted by lawyers. They can contain absolutely anything, and often &lt;em&gt;assign ownership of your change fully to the company to do with as they please, including relicensing it under different terms.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Eric_S._Raymond&quot;&gt;Eric S. Raymond&lt;/a&gt;, Co-founder of the Open Source Initiative, &lt;a href=&quot;https://www.linuxjournal.com/content/contributor-agreements-considered-harmful&quot;&gt;stated CLAs are harmful in the Linux Journal&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-a-developer-certificate-of-origin-is-better&quot;&gt;Why a Developer Certificate of Origin is better&lt;/h2&gt;

&lt;p&gt;The Developer Certificate of Origin (DCO) was created for the Linux kernel.&lt;/p&gt;

&lt;p&gt;It’s an incredibly simple, consistent agreement (unlike CLAs!) that simply says:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You have the right to submit the contribution under the open source license of the project.&lt;/li&gt;
  &lt;li&gt;You agree it can and will be licensed under the open source license of the project.&lt;/li&gt;
  &lt;li&gt;You agree the contribution will be shared as open source.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can read the full text here: https://developercertificate.org&lt;/p&gt;

&lt;p&gt;It’s not an arbitrary legal agreement. It doesn’t change between projects. It doesn’t give a company full ownership over your change.&lt;/p&gt;

&lt;h2 id=&quot;who-uses-a-developer-certificate-of-origin-dco-instead-of-a-cla&quot;&gt;Who uses a Developer Certificate of Origin (DCO) instead of a CLA?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The Linux kernel&lt;/li&gt;
  &lt;li&gt;GitLab &lt;a href=&quot;https://about.gitlab.com/blog/2017/11/01/gitlab-switches-to-dco-license/&quot;&gt;in 2017 switched to DCOs away from CLAs&lt;/a&gt;, with applause from the Debian and GNOME projects.&lt;/li&gt;
  &lt;li&gt;An &lt;a href=&quot;https://docs.google.com/document/d/1zpjDzL7yhGBZz3_7jCjWLfRQ1Jryg1mlIVmG8y6B1_Q/edit&quot;&gt;internal GitLab analysis memo&lt;/a&gt; notes that CLAs did not provide additional protections over a DCO for GitLab themselves.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-a-dco-for-your-project-is-easy&quot;&gt;Using a DCO for your project is &lt;em&gt;easy&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;There exists &lt;a href=&quot;https://probot.github.io/apps/dco/&quot;&gt;a GitHub check&lt;/a&gt; which verifies contributors have added a line at the end of their commit message confirming they agree to the DCO:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My change…&lt;/p&gt;

  &lt;p&gt;Signed-off-by: Random J Developer &lt;a href=&quot;mailto:random@developer.example.org&quot;&gt;random@developer.example.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; even has an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt; signing option built in to write this signed-off-by line for you:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -s -m 'My change...'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is that easy!&lt;/p&gt;

&lt;h4 id=&quot;git-commit-hook&quot;&gt;Git commit hook&lt;/h4&gt;

&lt;p&gt;You can even add a Git commit hook to your repository in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hooks/commit-msg&lt;/code&gt; file &lt;a href=&quot;https://raw.githubusercontent.com/hexops/ztemplate/main/hooks/commit-msg&quot;&gt;like this&lt;/a&gt; and contributors can easily install it after running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; via:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config core.hooksPath hooks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So if you forget to sign off on your commit, it’ll tell you the exact Git commands to fix it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Your commit message is not signed off with the DCO.

Please read and agree to the DCO: https://developercertificate.org/

Hint: Use 'git commit -s' flag to sign your commits

Hint: Use 'git commit -seF .git/COMMIT_EDITMSG' to recover your commit message and sign.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;be-sure-to-choose-a-license-with-patent-and-ip-protection&quot;&gt;Be sure to choose a license with patent and IP protection&lt;/h2&gt;

&lt;p&gt;One thing to note is that DCOs just say a change was made in good faith under the terms of the license.&lt;/p&gt;

&lt;p&gt;If the project’s license does not explicitly grant you the ability to use patents/IP surrounding what that code &lt;em&gt;does&lt;/em&gt;, then you do not have explicit permission to &lt;em&gt;use&lt;/em&gt; that code - even if it is under an open-source license. However, you could argue that the author meant to implicitly grant this permission by nature of contributing it under an open source license. This has, to date, never been tried in a court and thus there is no legal precedence either way.&lt;/p&gt;

&lt;p&gt;Licenses are another topic entirely, and you should carefully consider the options available to you, but this is why Hexops dual-licenses all code under both the MIT and Apache licenses.&lt;/p&gt;

&lt;p&gt;MIT is popular as it is very short and simple, while Apache has an explicit patent grant. The consumer of the code gets to choose which license they prefer.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Please use DCOs, not CLAs.&lt;/li&gt;
  &lt;li&gt;CLAs are harmful for the open-source community.&lt;/li&gt;
  &lt;li&gt;Not using a DCO is &lt;em&gt;potentially&lt;/em&gt; risky (for users of the code too!)&lt;/li&gt;
  &lt;li&gt;Not using a license that has an explicit patent grant is &lt;em&gt;potentially&lt;/em&gt; risky (for users of the code too!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my view, a DCO and dual-licensing under MIT + Apache-2.0 licenses grants users and contributors to an open source project the most freedom and guarantees.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: I am not a lawyer, just a spirited advocate. This is not legal advice. Consult a legal professional for advice.&lt;/em&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="licenses," />
      
        <category term="foss" />
      

      

      
        <summary type="html">Startups trying to embrace open source today readily adopt Contributor License Agreements (CLAs) as mandatory requirements for contributing. This is not in the spirit of OSS, and you should use a Developer Certificates of Origin (DCO) instead.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Unicode sorting is hard &amp;amp; why browsers added special emoji matching to regexp</title>
      
      
      <link href="/2021/unicode-sorting-why-browsers-added-special-emoji-matching" rel="alternate" type="text/html" title="Unicode sorting is hard &amp; why browsers added special emoji matching to regexp" />
      
      <published>2021-06-27T00:00:00+00:00</published>
      <updated>2021-06-27T00:00:00+00:00</updated>
      <id>/2021/unicode-sorting-why-browsers-added-special-emoji-matching</id>
      <content type="html" xml:base="/2021/unicode-sorting-why-browsers-added-special-emoji-matching">&lt;p&gt;As I work on &lt;a href=&quot;https://github.com/hexops/zorex&quot;&gt;Zorex, an omnipotent regexp engine&lt;/a&gt; I have stumbled into a world of tales about why Unicode text sorting is so annoying in the modern day. Let’s talk about that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#why-ascii-sorting-is-not-enough&quot;&gt;Why ASCII sorting is not enough&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#twitters-emoji-problem-or-when-unicode-locale-aware-sorting-really-matters™&quot;&gt;Twitter’s emoji problem, or when Unicode locale-aware sorting Really Matters™&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-browsers-added-special-emoji-matching-to-regexp&quot;&gt;Browsers added special emoji matching to regexp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#language-comparison&quot;&gt;Language comparison&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#javascript-collator-sorting-is-not-guaranteed-across-browsers&quot;&gt;JavaScript Collator sorting is not guaranteed across browsers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#go-sortstrings-is-not-locale-aware&quot;&gt;Go sort.Strings is not locale aware&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rust-vec-sorting-is-not-locale-aware&quot;&gt;Rust Vec sorting is not locale aware&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#swifts-default-is-not-locale-aware-but-unicode-support-is-notable&quot;&gt;Swift’s default is not locale aware, but unicode support is notable&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#zigs-ziglyph-package&quot;&gt;Zig’s ziglyph package&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-is-localized-text-sorting-hard&quot;&gt;Why is localized text sorting hard?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#webassembly-may-make-things-worse&quot;&gt;WebAssembly may make things worse?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-ascii-sorting-is-not-enough&quot;&gt;Why ASCII sorting is not enough&lt;/h2&gt;

&lt;p&gt;Perhaps you are sorting strings in JavaScript like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bears&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Beetle&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;kiss&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Similar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Apples&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [ &quot;Apples&quot;, &quot;Bears&quot;, &quot;Beetle&quot;, &quot;Similar&quot;, &quot;kiss&quot; ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that works pretty well, until someone translates it to German:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bären&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Käfer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;küssen&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Ähnlich&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Äpfel&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [ &quot;Bären&quot;, &quot;Käfer&quot;, &quot;küssen&quot;, &quot;Ähnlich&quot;, &quot;Äpfel&quot; ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The preferred alphabetical sorting would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ &quot;Ähnlich&quot;, &quot;Äpfel&quot;, &quot;Bären&quot;, &quot;Käfer&quot;, &quot;küssen&quot; ]&lt;/code&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array.sort&lt;/code&gt; doesn’t do that.&lt;/p&gt;

&lt;p&gt;That is because it is sorting lexicographically by byte values in the string, and not taking into account locales.&lt;/p&gt;

&lt;h2 id=&quot;twitters-emoji-problem---or-when-unicode-locale-aware-sorting-really-matters&quot;&gt;Twitter’s emoji problem - or when Unicode locale-aware sorting Really Matters™&lt;/h2&gt;

&lt;p&gt;Twitter is &lt;a href=&quot;https://9to5google.com/2018/05/21/twitter-android-emoji-updates/&quot;&gt;no stranger to issues with emojis&lt;/a&gt;, but have you ever thought about how they check if a hashtag contains only legal characters and emojis? Regexp, of course!&lt;/p&gt;

&lt;p&gt;You might think one could just use a regexp unicode character class, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[\u{1f300}-\u{1f5ff}]&lt;/code&gt; - but that only covers a single codepoint! Emojis and other text rely on combining multiple Unicode codepoints to compose &lt;em&gt;grapheme clusters&lt;/em&gt; - and often what we see as a single visible character on our screen.&lt;/p&gt;

&lt;p&gt;The full regexp needed to match all emojis with codepoints would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-regexp&quot;&gt;(?:\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d
[102,816 characters omitted]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For your sake, I’ve omitted the other 102,816 characters of that regexp. You can view it here: https://regex101.com/r/2ia4m2/7&lt;/p&gt;

&lt;h2 id=&quot;browsers-added-special-emoji-matching-to-regexp&quot;&gt;Browsers added special emoji matching to regexp&lt;/h2&gt;

&lt;p&gt;Luckily for Twitter and others, ECMAScript’s &lt;a href=&quot;https://github.com/tc39/proposal-regexp-unicode-property-escapes&quot;&gt;TC39 proposal a few years back&lt;/a&gt; extended the regexp engine to support Unicode property escapes for emojis and a few other Unicode properties so you can write e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-regexp&quot;&gt;\p{Emoji_Presentation}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without packing several thousand bytes of Unicode data tables or regexp into your JS bundle.&lt;/p&gt;

&lt;h2 id=&quot;language-comparison&quot;&gt;Language comparison&lt;/h2&gt;

&lt;p&gt;As &lt;a href=&quot;https://lemire.me/blog/2018/12/17/sorting-strings-properly-is-stupidly-hard/&quot;&gt;Daniel Lemire said&lt;/a&gt;: &lt;em&gt;sorting strings is stupidly hard&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;javascript-collator-sorting-is-not-guaranteed-across-browsers&quot;&gt;JavaScript Collator sorting is not guaranteed across browsers&lt;/h3&gt;

&lt;p&gt;You may have found browser’s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String.prototype.localCompare&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; and they &lt;strong&gt;DO&lt;/strong&gt; fix the issue&lt;a href=&quot;https://ourcodeworld.com/articles/read/958/how-to-sort-an-array-of-strings-alphabetically-with-special-characters-properly-with-javascript&quot;&gt;[1]&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const words = ['Bären', 'Käfer', 'küssen', 'Ähnlich', 'Äpfel'];
words.sort(Intl.Collator().compare);
// [ &quot;Ähnlich&quot;, &quot;Äpfel&quot;, &quot;Bären&quot;, &quot;Käfer&quot;, &quot;küssen&quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(note, however, you may wish to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intl.Collator('de').compare&lt;/code&gt; instead to sort according to German language customs)&lt;/p&gt;

&lt;p&gt;However, beware that if you look at &lt;a href=&quot;https://tc39.es/ecma402/#sec-collator-comparestrings&quot;&gt;the ECMA spec&lt;/a&gt; for this you will find:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is &lt;strong&gt;recommended&lt;/strong&gt; that the CompareStrings abstract operation be implemented following Unicode Technical Standard 10, Unicode Collation Algorithm […]&lt;/p&gt;

  &lt;p&gt;Applications should not assume that the behaviour of the CompareStrings abstract operation for Collator instances with the same resolved options will remain the same for different versions of the same implementation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although many browsers may produce similar sorting results - not all will. For one thing, not all locales are available across browsers.&lt;/p&gt;

&lt;p&gt;Further, different browsers may choose to sort things differently. For example IE 11 sorting “co-op” after “coop” while other browsers do the opposite.&lt;a href=&quot;https://stackoverflow.com/questions/33919257/sorting-strings-with-punctuation-using-intl-collator-is-inconsistent-across-brow&quot;&gt;[2]&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;go-sortstrings-is-not-locale-aware&quot;&gt;Go sort.Strings is not locale aware&lt;/h2&gt;

&lt;p&gt;It may be interesting to note that Go’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort.Strings&lt;/code&gt; operates on byte comparisons, and has the same issue as JavaScript’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array.prototype.sort&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;words := []string{&quot;Bären&quot;, &quot;Käfer&quot;, &quot;küssen&quot;, &quot;Ähnlich&quot;, &quot;Äpfel&quot;}	
sort.Strings(words)
// [Bären Käfer küssen Ähnlich Äpfel]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One can easily perform unicode code point (rune) sorting in Go, which would fix the above example - but note that rune sorting is not locale-aware, and importantly that &lt;a href=&quot;https://www.reddit.com/r/golang/comments/o1o5hr/fyi_a_single_go_rune_is_not_the_same_as_a_single&quot;&gt;a Go rune is not the same as a visible character&lt;/a&gt; and would not take into account grapheme clusters.&lt;/p&gt;

&lt;p&gt;For proper Unicode locale-aware sorting in Go, you need to use the Unicode Collation Algorithm via &lt;a href=&quot;https://pkg.go.dev/golang.org/x/text/collate&quot;&gt;golang.org/x/text/collate&lt;/a&gt; but be sure to also apply normalization to your text first via &lt;a href=&quot;https://pkg.go.dev/golang.org/x/text@v0.3.6/unicode/norm&quot;&gt;golang.org/x/text/unicode/norm&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;rust-vec-sorting-is-not-locale-aware&quot;&gt;Rust Vec sorting is not locale aware&lt;/h3&gt;

&lt;p&gt;A Rust &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec&lt;/code&gt; of strings implements sorting&lt;a href=&quot;https://doc.rust-lang.org/std/primitive.str.html#impl-Ord&quot;&gt;[3]&lt;/a&gt; lexicographically by their byte values, consistent with Go’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort.Strings&lt;/code&gt; and JavaScripts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array.prototype.sort&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let mut vec = Vec::new();
vec.push(&quot;Bären&quot;);
vec.push(&quot;Käfer&quot;);
vec.push(&quot;küssen&quot;);
vec.push(&quot;Ähnlich&quot;);
vec.sort(&quot;Äpfel&quot;);
println!(&quot;{:?}&quot;, vec);
// [&quot;Bären&quot;, &quot;Käfer&quot;, &quot;küssen&quot;, &quot;Ähnlich&quot;, &quot;Äpfel&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Locale-aware sorting in Rust is provided &lt;a href=&quot;https://github.com/google/rust_icu&quot;&gt;by ICU4C bindings by Google, google/rust_icu&lt;/a&gt; (note however, there have been a number of &lt;a href=&quot;https://github.com/rust-lang/rust/issues/14656#issuecomment-45164318&quot;&gt;vulnerabilities in the ICU4C library&lt;/a&gt;) and there is ongoing work to implement internationalization in pure Rust as a safer alternative: &lt;a href=&quot;https://github.com/unicode-org/icu4x&quot;&gt;unicode-org/icu4x&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;swifts-default-is-not-locale-aware-but-unicode-support-is-notable&quot;&gt;Swift’s default is not locale aware, but unicode support is notable&lt;/h3&gt;

&lt;p&gt;Swift remains consistent with other languages in sorting strings lexicographically by byte value:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bären&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Käfer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;küssen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ähnlich&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Äpfel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [&quot;Bären&quot;, &quot;Käfer&quot;, &quot;küssen&quot;, &quot;Ähnlich&quot;, &quot;Äpfel&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, it is notable that Swift includes locale sensitive sorting out of the box&lt;a href=&quot;https://sarunw.com/posts/different-ways-to-sort-array-of-strings-in-swift/&quot;&gt;[4]&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bären&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Käfer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;küssen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ähnlich&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Äpfel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;localizedStandardCompare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orderedAscending&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [&quot;Ähnlich&quot;, &quot;Äpfel&quot;, &quot;Bären&quot;, &quot;Käfer&quot;, &quot;küssen&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It also seems quite notable just &lt;a href=&quot;https://developer.apple.com/documentation/swift/string&quot;&gt;how very unicode-aware the Swift documentation is on their String type&lt;/a&gt;. Other languages could learn a thing or two here in educating developers.&lt;/p&gt;

&lt;h2 id=&quot;zigs-ziglyph-package&quot;&gt;Zig’s ziglyph package&lt;/h2&gt;

&lt;p&gt;Zig’s standard library is still quite under development, however it seems likely that major unicode functionality will be outside the stdlib.&lt;/p&gt;

&lt;p&gt;Luckily, &lt;a href=&quot;https://github.com/jecolon&quot;&gt;@jecolon&lt;/a&gt; in the Zig community is working on an excellent package for this: &lt;a href=&quot;https://github.com/jecolon/ziglyph&quot;&gt;ziglyph&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I mention this because I’m a fan of the language and have recently begun contributing to that package; but otherwise Zig isn’t any different than other languages listed here aside from there being no real “default” way to sort strings from what I know.&lt;/p&gt;

&lt;h2 id=&quot;why-is-localized-text-sorting-hard&quot;&gt;Why is localized text sorting hard?&lt;/h2&gt;

&lt;p&gt;I believe there are a combination of factors at play:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Most languages leave Unicode locale-aware text sorting as an afterthought.&lt;/li&gt;
  &lt;li&gt;Most developers don’t care enough to use Unicode, let alone implement locale-aware text sorting. Internationalization is always “that thing we’ll do if somebody complains” or an afterthought.&lt;/li&gt;
  &lt;li&gt;It’s hard. It wasn’t until recently that we got semi-decent support for it across browsers, and what is there still leaves a lot to be desired.&lt;/li&gt;
  &lt;li&gt;Many are still running into dated software, like NodeJS versions from ~2019 ish that &lt;a href=&quot;https://github.com/nodejs/node/issues/19214&quot;&gt;didn’t have full ICU support on by default&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;webassembly-may-make-things-worse&quot;&gt;WebAssembly may make things worse?&lt;/h2&gt;

&lt;p&gt;As a closing thought, I just want to hint at why I think WebAssembly will make things worse before they get better.&lt;/p&gt;

&lt;p&gt;Whether your application is in Go and has it’s own Unicode Collation Algorithm (UCA) implementation, or Rust and uses bindings to the popular ICU4C library - one thing is going to remain true: it requires large data files to work.&lt;/p&gt;

&lt;p&gt;The UCA algorithm depends on two quite large data table files to work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.unicode.org/Public/9.0.0/ucd/UnicodeData.txt&quot;&gt;UnicodeData.txt&lt;/a&gt; for normalization, a step required before sorting can take place.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unicode.org/Public/UCA/12.0.0/allkeys.txt&quot;&gt;allkeys.txt&lt;/a&gt; for weighting certain text above others.&lt;/li&gt;
  &lt;li&gt;And more, if you want truly locale-aware sorting and not just “the default” the UCA algorithm gives you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Together, these files can add up to over a half a megabyte.&lt;/p&gt;

&lt;p&gt;While WASM languages could shell out to JavaScript browser APIs for collation, I suspect they won’t due to the lack of guarantees around those APIs.&lt;/p&gt;

&lt;p&gt;A more likely scenario is languages continuing to leave locale-aware sorting as an optional, opt-in feature - that also makes your application larger.&lt;/p&gt;

&lt;p&gt;I think this a worthwhile problem to solve, so I am working on &lt;a href=&quot;https://github.com/jecolon/ziglyph/issues/3&quot;&gt;compression algorithms for these files specifically&lt;/a&gt; in Zig to reduce them to only a few tens of kilobytes.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="unicode," />
      
        <category term="regex," />
      
        <category term="zig" />
      

      

      
        <summary type="html">As I work on Zorex, an omnipotent regexp engine I have stumbled into a world of tales about why Unicode text sorting is so annoying in the modern day. Let’s talk about that.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">My game development journey &amp;amp; why I’m increasing my contribution to Zig to $200/mo</title>
      
      
      <link href="/2021/increasing-my-contribution-to-zig-to-200-a-month" rel="alternate" type="text/html" title="My game development journey &amp; why I'm increasing my contribution to Zig to $200/mo" />
      
      <published>2021-04-10T00:00:00+00:00</published>
      <updated>2021-04-10T00:00:00+00:00</updated>
      <id>/2021/increasing-my-contribution-to-zig-to-200-a-month</id>
      <content type="html" xml:base="/2021/increasing-my-contribution-to-zig-to-200-a-month">&lt;p&gt;Today, I increased my monthly donation to Zig to $200 a month. Before Zig, I have not contributed financially to any open source project.&lt;/p&gt;

&lt;p&gt;Before I can explain why I am so extremely excited about the &lt;a href=&quot;https://ziglang.org/&quot;&gt;Zig&lt;/a&gt; programming language and its community, I need to explain where I come from.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#i-grew-up-playing-linux-games-like-mania-drive&quot;&gt;I grew up playing Linux games like Mania Drive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#i-was-so-infatuated-with-this-game-engine--i-convinced-my-dad-s-coworkers-to-pay-me-to-build-them-a-virtual-meeting-world&quot;&gt;I was so infatuated with this game engine, I convinced my dad’s coworkers to pay me to build them a virtual meeting world&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#panda3d--disney-s-python-c---game-engine&quot;&gt;Panda3D: Disney’s Python/C++ game engine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#my-game-engine-appeared-on-hacker-news--2014-&quot;&gt;My game engine appeared on Hacker News (2014)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#joining-sourcegraph&quot;&gt;Joining Sourcegraph&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#unity-is-the-new-flash&quot;&gt;Unity is the new Flash&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#looking-for-the-one-language-to-rule-them-all&quot;&gt;Looking for the one language to rule them all&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#discovering-zig&quot;&gt;Discovering Zig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;i-grew-up-playing-linux-games-like-mania-drive&quot;&gt;I grew up playing Linux games like Mania Drive&lt;/h2&gt;

&lt;iframe width=&quot;720&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/7YFicbaXHw0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Mania Drive was an open-source clone of the popular Trackmania series. Me and my siblings in our early teens  easily spent hundreds, if not thousands, of hours in Mania Drive.&lt;/p&gt;

&lt;p&gt;In retrospect it has quite bad graphics, physics, game-play mechanics, etc. But it was customizable! There was a simple tile-based level editor. We would spend days building the most confusing, crazy, impossible maps to beat so we could challenge each other. We would play it all night.&lt;/p&gt;

&lt;p&gt;Obsession over this game led to even more modding: the discovery of &lt;a href=&quot;https://www.blender.org&quot;&gt;Blender&lt;/a&gt; meant we could create even more custom maps than in the limited tile-based map editor. Although the Blender UI was pretty rough back then:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114266230-073f2180-99aa-11eb-9196-5c546fe71fb8.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;it-wasnt-long-before-i-found-that-the-mania-drive-game-engine-was-open-source&quot;&gt;It wasn’t long before I found that the Mania Drive game engine was open-source.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://memak.raydium.org/index.php&quot;&gt;Raydium&lt;/a&gt;, the C game engine behind Mania Drive, is still around today - one of the beauties of open source software! At the time, the things about it that just blew my mind were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It supported scripting through PHP! I had used PHP a lot with LAMP stacks, so the idea that I could script the engine in PHP was &lt;em&gt;mind blowing to now 14-year old me.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;2 years later, I got an iPod touch and the Raydium developers had just posted a demo video showing the engine running on the iPhone. 16 year old me thought this was &lt;em&gt;literally&lt;/em&gt; the coolest thing ever, albeit immensely disappointed I did not have a Mac to build it for my iPod:&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;720&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/wcPfxr9BgA4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;i-was-so-infatuated-with-this-game-engine-i-convinced-my-dads-coworkers-to-pay-me-to-build-them-a-virtual-meeting-world&quot;&gt;I was so infatuated with this game engine, I convinced my dad’s coworkers to pay me to build them a virtual meeting world&lt;/h2&gt;

&lt;p&gt;My dad was running one of his many startups at the time - it had some momentum behind it, basically a platform like Ebay but for selling services instead of goods. Several of his work friends were funding it with significant amounts of their own money.&lt;/p&gt;

&lt;p&gt;Unfortunately for them, they spent most of their focus on business operations than actually getting a product out the door. Lucky for me, however, this meant they had came across Sun’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_Wonderland&quot;&gt;Project Wonderland&lt;/a&gt; - the delightfully terrible 3D virtual workplace of the future (or so Sun thought, before they had to sell to Oracle.) It was &lt;em&gt;terrible,&lt;/em&gt; barely a good demo:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114258853-625b1f00-997e-11eb-959d-15a2cdafae9c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It required something like 32 CPUs and 64G of memory to run the server for just 8 players - no small feat back in 2010! The client was laggy, there were virtual whiteboards you could draw on but everything was slow. Even its VOIP feature was glitchy - although quite novel at the time. It was all around &lt;em&gt;a terrible experience.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;16-year-old me convinced my dad and his coworkers to instead pay me to build them a better version: one using Raydium, C - and PHP.&lt;/p&gt;

&lt;p&gt;It wasn’t long before I had some amateur copy of Project Wonderland - ironically better than Sun’s in &lt;em&gt;many aspects&lt;/em&gt; - and surely worse in others. It even had a client auto-updater built with wxWidgets and Python (it just shelled out to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svn&lt;/code&gt; client to download the latest copy of the game, hah!)&lt;/p&gt;

&lt;h2 id=&quot;but-the-game-kept-crashing-at-random-and-i-had-no-idea-why&quot;&gt;But the game kept crashing at random, and I had no idea why&lt;/h2&gt;

&lt;p&gt;The truth was literally a 16-year old script kiddy copying and pasting C code from various demos of Raydium, without a care in the world for freeing memory or avoiding stack corruption.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Don't remove this print statement. Game will crash!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It was around this time that I began to really get into Python: it was simple, something I could really wrap my brain around, and it was powerful. I stumbled into cython and wrote OpenGL bindings - this time with more appreciation for memory management.&lt;/p&gt;

&lt;h2 id=&quot;panda3d-disneys-pythonc-game-engine&quot;&gt;Panda3D: Disney’s Python/C++ game engine&lt;/h2&gt;

&lt;p&gt;Panda3D was the game engine Disney used to create Toontown Online and Pirates of the Carribean Online:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114259007-b31f4780-997f-11eb-9741-db4507dd820f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114259061-0db8a380-9980-11eb-8991-1f8443388cc3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was written in C++, with automatic binding generation for Python. In fact, many portions of the engine were written in &lt;em&gt;just&lt;/em&gt; Python and not usable from C++ at all. &lt;a href=&quot;https://www.panda3d.org&quot;&gt;They revamped their website site recently, so I guess it’s still around.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-panda3d-game-engine-opened-new-doors-for-me&quot;&gt;The Panda3D game engine opened new doors for me&lt;/h2&gt;

&lt;p&gt;Discovering Panda3D opened new doors for me. At around 16-17 years old now, I was able to really get my first real taste of game development: I could write games in this – in Python – and &lt;em&gt;they wouldn’t crash in ways that I couldn’t understand.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pretty soon, I had actual games in the works. I was starting to learn about why draw order matters - and how I had no understanding of mip-mapping:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114259274-8e2bd400-9981-11eb-905d-cd675c582f5b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114259299-bb788200-9981-11eb-97df-ad00c29a54c2.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-began-to-prevail&quot;&gt;I began to prevail&lt;/h2&gt;

&lt;p&gt;At this point I had several, actually working games - I was proud of what I was working on, had multiplayer functionality hooked up to a MySQL database even.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114259396-7ef95600-9982-11eb-9e32-3b8edff3e67f.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;but-my-limited-knowledge-hit-me-again&quot;&gt;But my limited knowledge hit me again&lt;/h2&gt;

&lt;p&gt;For my game, I wanted nothing more than for my friends to be able to chat with me using a chat box. The problem was, Panda3D’s Python GUI library, DirectGUI, was just too slow at rendering text.&lt;/p&gt;

&lt;p&gt;I tried everything I could, and even got to the point where I was asking on the forums if it was possible to draw a TextNode with multi-threading:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Calls to TextNode.generate() are very expensive.&lt;/p&gt;

  &lt;p&gt;Is there a way for Panda to run all TextNode.generate() calls in a seperate thread? I’ve attempted doing it on my own using direct.stdpy.threading.Thread, only it causes dead locks, I would guess this is to my own lack of knowledge.&lt;/p&gt;

  &lt;p&gt;could anyone help me?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn’t get a response. I couldn’t solve the issue. “I can’t add a chat box to my games” became a problem &lt;em&gt;I could not solve.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;learning-c&quot;&gt;Learning C++&lt;/h2&gt;

&lt;p&gt;I was at a point where I had rewritten most of Panda3D’s UI components myself in Python (mind you, theirs &lt;em&gt;are&lt;/em&gt; written in Python - you cannot use them from C++. I don’t know why I did this.)&lt;/p&gt;

&lt;p&gt;But I still needed a way to render text. I needed a way to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextNode.generate()&lt;/code&gt; faster. Little did I know at the time that it was generating geometry from freetype and creating one draw call per text drawn - which is super slow, and did not help my naive usage of its API!&lt;/p&gt;

&lt;p&gt;The harsh reality was that I didn’t have anybody to teach me. I spent months trying to learn C++, but it is a beast (and “Disney game engine C++” is, of course, a flavor of C++ not found in books.) It wasn’t something I could handle as 16-year-old kid without any real knowledge of low level languages.&lt;/p&gt;

&lt;p&gt;In trying to learn C++, something became painfully clear to me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Having part of my application written in Python and part of it written in C++, two very different languages, was only great until I realized I _had&lt;/em&gt; to dive into this large C++ code base and had no knowledge of it._&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I gave up.&lt;/p&gt;

&lt;h2 id=&quot;learning-go-writing-my-own-game-engine&quot;&gt;Learning Go, writing my own game engine&lt;/h2&gt;

&lt;p&gt;When Google announced Go, I heard about it very early on. At this time, they were still advertising it as a low-level systems language, an alternative to C, &lt;em&gt;a better C&lt;/em&gt;. But more forgiving, because it had a garbage collector.&lt;/p&gt;

&lt;p&gt;Coming from a predominantly Python background at the time, this sounded incredible to me: I could write a game engine in this and understand my code &lt;em&gt;end to end&lt;/em&gt; and make sure there is no single piece that I do not understand.&lt;/p&gt;

&lt;p&gt;I spent the next 4 years of my life, almost 100% full-time working on &lt;a href=&quot;https://azul3d.org&quot;&gt;Azul3D, a game engine in Go&lt;/a&gt; - and spent only minimal time attending online community college on the weekends.&lt;/p&gt;

&lt;p&gt;There was &lt;em&gt;so much&lt;/em&gt; that I learned during this time, about software engineering, game engines, audio, input, math, image and audio codecs, blender plugins, file formats, physics, and working with other people (some cool things &lt;a href=&quot;https://github.com/nwidger/nintengo&quot;&gt;like a NES emulator came out of that&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I learned an &lt;em&gt;immense&lt;/em&gt; amount, but I had nothing to show for it aside from &lt;a href=&quot;https://azul3d.org&quot;&gt;a funny looking website&lt;/a&gt; and some quite poor screenshots (to the dismay of every person I told.)&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114266918-f42e5080-99ad-11eb-8cff-f9376f3bf0bb.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-game-engine-appeared-on-hacker-news-2014&quot;&gt;My game engine appeared on Hacker News (2014)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=8151028&quot;&gt;Someone posted it on Hacker News&lt;/a&gt;, which was both exciting but also extremely depressing for me at the time. I took the feedback as statements that what I was doing &lt;em&gt;was wrong&lt;/em&gt;, rather than as feedback about how to improve:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The web site looks cool, but it sets off a whole bunch of red flags for me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;the go programming language is not very suitable for games at all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;if you truly need a performant graphics engine, it’s going to be either C++, C or Rust anyway.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Azul3D is for programmers and doesn’t provide GUI-editors.&lt;/p&gt;

  &lt;p&gt;So, you write your levels using a text editor? That’s not for programmers, that’s for people who hate themselves.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;No screenshots of the game at all?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Garbage collector FAQ isn’t necessarily reassuring, since it seems to say “go through the same hoops other GC gaming platforms push you through”. Obligatory Rust gaming comment goes here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;in Rust you have code without GC, but the compiler makes sure that everything is freed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I learned so much from this interaction:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Being transparent about project status is important.&lt;/li&gt;
  &lt;li&gt;I shouldn’t have “hidden” screenshots of the project. I was worried people would judge what the engine is capable of based on bad programmer artwork: instead, they judged it for having none.&lt;/li&gt;
  &lt;li&gt;I should’ve talked about the interesting parts more:
    &lt;ul&gt;
      &lt;li&gt;Did you know there is a D* lite pathfinding algorithm that was used in one of the Mars rovers, is super simple, and handles dynamic terrains? Much nicer than A* and other variants.&lt;/li&gt;
      &lt;li&gt;What my vision for a game engine deeply integrated with Blender, and developer-first, would look like in practice.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I frankly shouldn’t have cared so much. I thought what I was doing was awesome, and I let others’ viewpoints affect my own view of my work negatively.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;joining-sourcegraph&quot;&gt;Joining Sourcegraph&lt;/h2&gt;

&lt;p&gt;It was around this time that I was basically deciding: &lt;em&gt;what would I do for a living?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Luckily, someone in the Go community (whom I’d never talked to before) reached out to me and asked “hey, what are you doing?” - I told them I was in school, and left out the part where I was a college student living with parents, scraping by, and likely going grocery-store-part-time-job seeking soon.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114268396-b1707680-99b5-11eb-9038-c0b8d919b44f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t come from a background that would lead me to believe I could make a living programming in Go, to the contrary my parents often warned me I couldn’t and that I would need to go into Cisco network infrastructure instead.&lt;/p&gt;

&lt;p&gt;I was told in blunt terms, I could scrape by doing what I love - or make a killing doing something I hate. My parents were mechanical engineers at aerospace companies (I’ll let you guess which path they took.)&lt;/p&gt;

&lt;p&gt;Bill’s short ~20 minute conversation with me, quite literally changed my life in ways I couldn’t have imagined. I often think about where I would be today had he not reached out to me, and I never quite knew how to reach back out and say thank you in a way that was as meaningful to him as what he did was for me.&lt;/p&gt;

&lt;h2 id=&quot;six-and-a-half-years-later-im-still-at-sourcegraph&quot;&gt;Six and a half years later, I’m still at Sourcegraph.&lt;/h2&gt;

&lt;p&gt;I’ve learned &lt;em&gt;so much&lt;/em&gt; about startups, being a good engineer, management, business operations, cloud infrastructure, teamwork, communication, and so much more in the last six years I’ve spent at Soucegraph. There are so many stories I have, and so many great people I have had the opportunity to work with because of it.&lt;/p&gt;

&lt;p&gt;We grew from awkward little startup without a clear product, a tiny team, an uncertain future - into a sprawling metropolis with massive amounts of happy users, customers, $50m i series C funding, and have grown the team to over a hundred people all over the world. I have played a key role in that, and continue to this day.&lt;/p&gt;

&lt;p&gt;A passion for making games as a kid, turned into a passion for making developer tools all around better. I still have much to do here.&lt;/p&gt;

&lt;h2 id=&quot;but-im-still-a-game-developer-at-heart&quot;&gt;But I’m still a game developer at heart&lt;/h2&gt;

&lt;p&gt;If there’s one thing I return to &lt;em&gt;regularly&lt;/em&gt;, &lt;em&gt;consistently&lt;/em&gt;, and &lt;em&gt;frequently&lt;/em&gt; despite working a demanding job at a startup - it’s game development. And you’re going to hear a lot more about that soon.&lt;/p&gt;

&lt;p&gt;Since March of last year, I began basically working two jobs: every day after I sign off from work at Sourcegraph, I spend around 8 hours working on game development.&lt;/p&gt;

&lt;p&gt;I am more determined than ever before, and success or fail - &lt;em&gt;I will try.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;c-was-easier-for-me-as-a-beginner-than-c&quot;&gt;C was easier for me as a beginner than C++&lt;/h2&gt;

&lt;p&gt;Hacking together games in Raydium’s C API taught me that C is hard, but also showed me in retrospect that if I had &lt;em&gt;just a little bit more guidance&lt;/em&gt;, If C was just &lt;em&gt;slightly&lt;/em&gt; easier, if I only knew the tricks of how to debug C programs: I would have been immensely successful in working with it.&lt;/p&gt;

&lt;p&gt;With Panda3D, writing some decent games in its Python API only to later find I needed to dive into this magical box of a complex C++ core made me believe that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;C++ is less beginner friendly than C.&lt;/strong&gt; One major reason for this is due to the different C++ dialects: you’re not going to understand Panda3D C++, or Unreal C++ - by going and reading books about the language or taking a class. They create their own dialects through the language. Today with different C++ versions, even the textbooks and classes you find will be using different dialects.&lt;/li&gt;
  &lt;li&gt;There are not good tutorials or explanations online about how game engines work and why. I regularly find that very experienced software engineers and even people who work in Unity or Unreal regularly, simply do not have a decent grasp of how game engines work. “What do you mean polygon count is not very important?!” are among the most basic questions that arise, with modern game engines abstracting away so many bits that your average developer merely says:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Game engines are just magical ultra-complex things I could never even begin to understand! Only the professional AAA studios and god programmers like Jonathan Blow should even try to do that!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I do not subscribe to this belief - and believe that most game developers &lt;em&gt;have been robbed&lt;/em&gt; of the proper end-to-end understanding of game engines they deserve.&lt;/p&gt;

&lt;h2 id=&quot;unity-is-the-new-flash&quot;&gt;Unity is the new Flash&lt;/h2&gt;

&lt;p&gt;You, dear reader, do not understand &lt;em&gt;just how far the bar for game development has been lowered.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Nj8gt_92c-M&quot;&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114283707-f6b99600-99ff-11eb-82f8-5fd2e2139636.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Putting together a game in Unity is so beyond ridiculously easy today with Unity that it is incredible, the game engine is truly the new Adobe Flash equivalent.&lt;/p&gt;

&lt;p&gt;You could pick up that engine today, and have a silly little game you yourself put together the next.&lt;/p&gt;

&lt;p&gt;Of course, with Unity, comes large problems for serious game developers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are &lt;em&gt;so many&lt;/em&gt; people hacking together Unity games that the quality of the information out there is quite bad.&lt;/li&gt;
  &lt;li&gt;The quality of what is on the Unity asset store is quite bad.&lt;/li&gt;
  &lt;li&gt;Unity encourages hacking things together to get a quick demo running - and it shows. Game developers hide the fact that they use Unity, because it has such a negative connotation with players that Unity == low quality.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-do-we-encourage-building-but-not-understanding&quot;&gt;Why do we encourage building, but not understanding?&lt;/h2&gt;

&lt;p&gt;Game engines today are the epitome of &lt;em&gt;large complex code-bases&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The people and companies working on them value features over quality.&lt;/li&gt;
  &lt;li&gt;When there is a major issue, there are few people with an understanding of it to be found.&lt;/li&gt;
  &lt;li&gt;Teaching people how to write good software is hard - and that’s our customer base (I imagine Unity/Unreal say) - far easier to give them something akin to a scripting language. It’s &lt;em&gt;good&lt;/em&gt; even if our users don’t understand how all of this works.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Teaching is hard, but if done right is invaluable. There is a reason NeHe Productions’ OpenGL tutorials are still revered today: they are incremental, and teach in the form of building blocks on top of what you previously learned.&lt;/p&gt;

&lt;p&gt;There’s a reason many AAA studios simply &lt;em&gt;throw out everything&lt;/em&gt; and start from scratch when working on their next title.&lt;/p&gt;

&lt;p&gt;We encourage building new things, but not understanding existing things.&lt;/p&gt;

&lt;h2 id=&quot;one-language-to-write-your-game-and-engine-in&quot;&gt;One language to write your game and engine in&lt;/h2&gt;

&lt;p&gt;Scripting languages for game engines stem from multiple desires - the most common being some variant of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C++ is hard, but we need it for performance.&lt;/li&gt;
  &lt;li&gt;My level designers can’t write C++ code!&lt;/li&gt;
  &lt;li&gt;I cannot understand C++, but do know C#/Python/Java/etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lot of people have a &lt;em&gt;terrible&lt;/em&gt; experience from school where they were taught C or C++, had absolutely no understanding of what was going on - and were told “This is programming!”&lt;/p&gt;

&lt;p&gt;I believe that in general, writing your game in a different language than the engine (Unity’s C#/C++ core model, Panda3D’s Python/C++ core model, and yes - perhaps even Unreal’s &lt;a href=&quot;https://blueprintsfromhell.tumblr.com/&quot;&gt;Blueprints&lt;/a&gt;/C++ core model - which I admit is the better of the three)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blueprintsfromhell.tumblr.com&quot;&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114284178-025a8c00-9a03-11eb-8b22-3f7cd6324b31.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pictured: The Unreal character controller blueprint for a game called &lt;a href=&quot;https://store.steampowered.com/app/1037260/Diacrisis/&quot;&gt;Diacrisis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whether you have good code or bad code, good blueprints or bad blueprints - the truth is that having one part of your application in a completely different language &lt;em&gt;creates a significant barrier to learning.&lt;/em&gt; I believe that is a bad thing, and the long-term costs outweigh the benefits.&lt;/p&gt;

&lt;h2 id=&quot;looking-for-the-one-language-to-rule-them-all&quot;&gt;Looking for the one language to rule them all&lt;/h2&gt;

&lt;h3 id=&quot;could-rust-be-it&quot;&gt;Could Rust be it?&lt;/h3&gt;

&lt;p&gt;Initially, I spent a substantial amount of time considering Rust as that language. It’s offer of memory safety guarantees is extremely compelling to me.&lt;/p&gt;

&lt;p&gt;I even convinced us to adopt Rust at Sourcegraph in some form, our syntax highlighter is &lt;a href=&quot;https://github.com/sourcegraph/syntect_server&quot;&gt;a little Rust HTTP server&lt;/a&gt; that was basically write-and-forget. We haven’t maintained it at all, and it’s held up pretty well for over 5 years.&lt;/p&gt;

&lt;p&gt;But maintaining it has been &lt;em&gt;brutal&lt;/em&gt;. We mostly have Go developers there, and despite a strong desire from many of them to learn Rust really none of them have been able to successfully dive into the codebase and get started.&lt;/p&gt;

&lt;p&gt;Rust’s learning curve is &lt;em&gt;steep&lt;/em&gt;. Steeper than C++ in my view, and definitely steeper than C (despite its many, massive flaws.)&lt;/p&gt;

&lt;p&gt;I spent upwards of 6 months on-and-off trying to become proficient at writing Rust code, and I never really became productive: regularly stumbling across complex issues in downstream dependencies (often used by everyone, but maintained by no one in the rust-lang-nursery.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I &lt;em&gt;love&lt;/em&gt; the idea of Rust. I love what it promises. And I kept going back to it on-and-off for over 6 months &lt;em&gt;because I truly wanted to be able to be productive in it.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It didn’t work. “I’m just not smart enough to use this language” I often thought. And I fear this will be the takeaway of many who hear the promise of the language, only to discover another “I took a C++ class in school and it was terrible” experience, leading so many more developers to conclude “I’m not good enough for low-level programming, I should learn JavaScript instead”.&lt;/p&gt;

&lt;h3 id=&quot;could-the-v-language-be-it&quot;&gt;Could the V language be it?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; The V language author &lt;a href=&quot;https://twitter.com/v_language/status/1382171515924447234?s=20&quot;&gt;reached out over Twitter&lt;/a&gt; and it would seem my memory was faulty about what happened here, this was due to a misunderstanding almost 100% on my side and I have falsely mis-characterized the V community here as being less friendly then they were in practice, and I am deeply sorry for that.&lt;/p&gt;

&lt;p&gt;I believe my criticisms below about the controversy surrounding the project and the secretive nature &lt;em&gt;when it launched&lt;/em&gt; are still valid, and were ultimately major factors in why I chose to not further consider it.&lt;/p&gt;

&lt;p&gt;At the same time, &lt;strong&gt;I want to point out that V does not look the same as when it launched - and anybody who like me left due to those issues may do well &lt;a href=&quot;https://vlang.io/&quot;&gt;to reconsider it today&lt;/a&gt; as the project and details surrounding it appear to have changed substantially.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What this section originally said was:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I heard about &lt;a href=&quot;https://news.ycombinator.com/item?id=25511073&quot;&gt;the V programming language&lt;/a&gt;, it seemed right on the spot.&lt;/p&gt;

  &lt;p&gt;I immediately jumped into the community to chat with the author, despite the controversy surrounding it - and tried to get more info about it, how he was thinking of the language, etc.&lt;/p&gt;

  &lt;p&gt;I asked if there were plans to support raw multi-line string literals, like Go. I was struck by a firm ‘No. Go doesn’t have raw string literals either.” - it was the unfriendly community I came across, the controversy surrounding it, and the &lt;em&gt;secretive nature of the project&lt;/em&gt; (“I have this, but I’m not going to share it yet”) that made me lose faith in its promise.&lt;/p&gt;

  &lt;p&gt;This wasn’t a language whose community I could join and contribute to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;could-i-build-it&quot;&gt;Could I build it?&lt;/h3&gt;

&lt;p&gt;When the COVID-19 pandemic first hit, I thought to myself:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If Go isn’t it, Rust isn’t it, the V language isn’t it - could I build it? Could I create the “better C” I am looking for? What would it look like?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;4 months later, I had a pretty good picture. I had an early stages compiler for the language in Go using LLVM, and knew what I wanted in a “better C”. There was a &lt;em&gt;long&lt;/em&gt; road ahead, but I had a picture of it. Until..&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;*cat spills coffee on $2800 laptop, frying SSD with ~4 months of uncommitted work on EBNF parser generators* yeah.. no, that’s.. that’s okay, I wanted to rewrite all of that code. Yeah. This is fine.&lt;/p&gt;&amp;mdash; Stephen Gutekanst (@slimsag) &lt;a href=&quot;https://twitter.com/slimsag/status/1265452387453431808?ref_src=twsrc%5Etfw&quot;&gt;May 27, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Obviously, I was an idiot and should’ve just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;d my code - or backed up my laptop - but nonetheless this was a setback.&lt;/p&gt;

&lt;h2 id=&quot;discovering-zig&quot;&gt;Discovering Zig&lt;/h2&gt;

&lt;p&gt;I continued to look for this mythical “better C” - and one name that kept arising in my sphere was &lt;a href=&quot;https://ziglang.org&quot;&gt;Zig&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I didn’t pay much attention to it, until I shared it with my brother for the 3rd time:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;color&quot; src=&quot;https://user-images.githubusercontent.com/3173176/114257988-6be18880-9978-11eb-98e9-68027361bc1c.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“…I already shared this with you?”&lt;/p&gt;

  &lt;p&gt;“I am really excited about this. It’s literally the language I was trying to build before I think”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;learning-zig&quot;&gt;Learning Zig&lt;/h3&gt;

&lt;p&gt;In trying to learn Zig, there were two things that struck me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I could be productive in Zig right away. Transitioning from Go at work to Zig after-hours every day &lt;em&gt;was easy.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;The community was so friendly, inviting, and helpful in answering my questions.&lt;/li&gt;
  &lt;li&gt;I continuously saw a theme of “this is a decentralized community, there is no ‘official’ thing we’ll ever push onto you, we want everyone to contribute and &lt;em&gt;truly be a part of this&lt;/em&gt;”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zig became the first open-source project I had &lt;em&gt;ever&lt;/em&gt; contributed to financially.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;And if none of the above convinces you, let me tell you the following: &lt;a href=&quot;https://twitter.com/ziglang?ref_src=twsrc%5Etfw&quot;&gt;@ziglang&lt;/a&gt; is the first language I have felt strongly I should try and contribute to, and the ONLY open source project I have ever donated to. No other has been so compelling&lt;/p&gt;&amp;mdash; Stephen Gutekanst (@slimsag) &lt;a href=&quot;https://twitter.com/slimsag/status/1319546299520200704?ref_src=twsrc%5Etfw&quot;&gt;October 23, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;working-in-it&quot;&gt;Working in it&lt;/h3&gt;

&lt;p&gt;Thus far, I’ve worked on two things in Zig:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hexops/xorfilter&quot;&gt;an implementation of Xor Filters and Fuse Filters, which are faster and smaller than Bloom and Cuckoo filters and allow for quickly checking if a key is part of a set.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devlog.hexops.com/2021/zig-parser-combinators-and-why-theyre-awesome&quot;&gt;Zig, Parser Combinators - and Why They’re Awesome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I continue to work in Zig daily, with no plans to stop - mark my words, this is an amazing language to work in.&lt;/p&gt;

&lt;h3 id=&quot;the-community-is-incredible&quot;&gt;The community is incredible&lt;/h3&gt;

&lt;p&gt;Over time, I watched and read more content from the Zig developers. It’s been beautiful to see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Them constantly, proactively advocate against zealotry of the language.&lt;/li&gt;
  &lt;li&gt;Them constantly advocate for new members of the community to actually help others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not only that, but I began to notice the Zig foundation actually &lt;em&gt;directly paying open source developers through donations&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Zig/comments/fvfguq/please_welcome_vexu_to_the_core_zig_team/&quot;&gt;Please welcome Vexu to the core Zig team&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Zig/comments/j2u1ww/please_welcome_jakub_konka_to_the_core_zig_team/&quot;&gt;Please welcome Jakub Konka to the Core Zig Team&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Zig/comments/ixvjsf/please_welcome_alex_nask_to_the_core_zig_team/&quot;&gt;Please welcome Alex Nask to the Core Zig Team&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Zig/comments/mgluix/please_welcome_frank_denis_to_the_core_zig_team/&quot;&gt;Please welcome Frank Denis to the Core Zig Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;ZSF is a small organization and makes efficient use of monetary resources. The plan is to keep it that way, but we do want to turn our unpaid volunteers into paid maintainers to help merge pull requests and make swifter progress towards 1.0. The whole point of ZSF being non-profit is to benefit people. &lt;strong&gt;We’re trying to get open source maintainers paid for their time.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(from https://ziglang.org/zsf)&lt;/p&gt;

&lt;p&gt;This is such a beautiful thing to see happening, and I hope that other open source communities take lessons from Zig here. The execution here is so important, and so far the Zig community’s execution has been incredible here.&lt;/p&gt;

&lt;h3 id=&quot;my-commitment-to-zig&quot;&gt;My commitment to Zig&lt;/h3&gt;

&lt;p&gt;For me, Zig ticks all the boxes of a programming language that could fundamentally upend the way that video games are built for the better.&lt;/p&gt;

&lt;p&gt;I want to see it succeed - and make it succeed at exactly that. Today, I raise my monthly contribution &lt;a href=&quot;https://github.com/sponsors/ziglang&quot;&gt;on GitHub sponsors&lt;/a&gt; to $200/mo. I would encourage anyone reading this to go and find ways to contribute (financially or not) to a vision you believe in.&lt;/p&gt;

&lt;p&gt;In addition to the above, I am committed to building the following in Zig:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A game engine for the future&lt;/li&gt;
  &lt;li&gt;Better developer tools (not just for game developers)&lt;/li&gt;
  &lt;li&gt;Several real video games, which I believe can be competitive with what AAA studios offer today.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading my journey, and I hope you’ll consider following it in the future.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="zig" />
      

      

      
        <summary type="html">Today, I increased my monthly donation to Zig to $200 a month. Before Zig, I have not contributed financially to any open source project.</summary>
      

      
      
        
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/3173176/114259396-7ef95600-9982-11eb-9e32-3b8edff3e67f.png" />
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Zig, Parser Combinators - and Why They’re Awesome</title>
      
      
      <link href="/2021/zig-parser-combinators-and-why-theyre-awesome" rel="alternate" type="text/html" title="Zig, Parser Combinators - and Why They're Awesome" />
      
      <published>2021-03-10T00:00:00+00:00</published>
      <updated>2021-03-10T00:00:00+00:00</updated>
      <id>/2021/zig-parser-combinators-and-why-theyre-awesome</id>
      <content type="html" xml:base="/2021/zig-parser-combinators-and-why-theyre-awesome">&lt;p&gt;In this article we will be exploring what &lt;a href=&quot;https://en.wikipedia.org/wiki/Parser_combinator&quot;&gt;parser combinators&lt;/a&gt; are, what &lt;em&gt;runtime parser generation&lt;/em&gt; is - why they’re useful, and then walking through a &lt;a href=&quot;https://ziglang.org&quot;&gt;Zig&lt;/a&gt; implementation of them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#why-are-parser-combinators-useful&quot;&gt;What are parser combinators?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#going-deeper-runtime-parser-generation&quot;&gt;Going deeper: &lt;em&gt;runtime parser generation&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-note-about-traditional-regex-engines&quot;&gt;A note about traditional regex engines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementing-the-parser-interface&quot;&gt;Implementing the Parser interface&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#compile-time-vs-run-time&quot;&gt;Compile-time vs. run-time&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-parser-interface&quot;&gt;The parser interface&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#zig-generics-are-provided-via-type-parameters&quot;&gt;Zig generics are provided via type parameters&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#zig-runtime-interfaces&quot;&gt;Zig runtime interfaces&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#type-parameters&quot;&gt;Type parameters&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#errors-the-parser-interface-can-produce&quot;&gt;Errors the Parser interface can produce&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#our-first-parser&quot;&gt;Our first Parser&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-actually-is-a-reader&quot;&gt;What actually is a “Reader”?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#a-parser-that-parses-a-literal-string&quot;&gt;A Parser that parses a literal string&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#passing-parameters-to-a-parser-implementation&quot;&gt;Passing parameters to a parser implementation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#understanding-zigs-wildconfusing-fieldparentptr&quot;&gt;Understanding Zig’s wild/confusing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@fieldParentPtr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#implementing-the-rest-of-parse&quot;&gt;Implementing the rest of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#our-first-parser-combinator&quot;&gt;Our first &lt;em&gt;parser combinator&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-our-oneof-parser-combinator&quot;&gt;Using our OneOf parser combinator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#runtime-parser-generation&quot;&gt;Runtime parser generation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#closing-thoughts&quot;&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-are-parser-combinators&quot;&gt;What are parser combinators?&lt;/h2&gt;

&lt;p&gt;A parser parses some text to produce a result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110372092-1c234080-800b-11eb-8095-654c3c81354d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Parser_combinator&quot;&gt;parser combinator&lt;/a&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;higher-order function&lt;/a&gt; which &lt;em&gt;takes parsers as input&lt;/em&gt; and &lt;em&gt;produces a new parser&lt;/em&gt; as output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110372575-b4b9c080-800b-11eb-9ef8-58f3ee0e1f1d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-are-parser-combinators-useful&quot;&gt;Why are parser combinators useful?&lt;/h2&gt;

&lt;p&gt;Let’s say we want to parse the syntax which describes a regular expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[bc].*abc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can define some &lt;em&gt;parsers&lt;/em&gt; to help us parse this syntax (e.g. into tokens or AST nodes):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110375065-b1740400-800e-11eb-987e-b5a7c5a3381b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Suppose that for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[bc].*abc&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexLiteralParser&lt;/code&gt; can parse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;, but not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abc&lt;/code&gt; (the string.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexRangeOpenParser&lt;/code&gt; can parse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexRangeCloseParser&lt;/code&gt; can parse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexAnyParser&lt;/code&gt; can parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; “any character” syntax.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexRepetitionParser&lt;/code&gt; can parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; repetition operator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have these &lt;em&gt;parsers&lt;/em&gt;, we can define &lt;em&gt;parser combinators&lt;/em&gt; to help us parse the full regular expression. First, we need something to parse a string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abc&lt;/code&gt; which we can define as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110413375-fa49ae00-804a-11eb-8311-64e737513000.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneOrMore&lt;/code&gt;, though? That’s our first parser combinator!&lt;/p&gt;

&lt;p&gt;It takes a single parser as input (in this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexLiteralParser&lt;/code&gt;) and uses it to parse the input one or more times. If it succeeded once, the parser combinator succeeded. Otherwise, it failed to parse anything.&lt;/p&gt;

&lt;p&gt;Now if we want to parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[bc]&lt;/code&gt; part of our regex, let’s say it can only contain a literal like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bc&lt;/code&gt; (of course, real regex allows far more than this) we can e.g. reuse our new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexStringLiteralParser&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110413643-780db980-804b-11eb-8fe5-8ca97b2e96ca.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequence&lt;/code&gt; is a parser combinator which takes multiple parsers and tries to parse them one-after-the-other in order, requiring all to succeed or failing otherwise.&lt;/p&gt;

&lt;p&gt;Building upon this basic idea, we can use parser combinators to build a full regex syntax parser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110414508-2ebe6980-804d-11eb-9422-0888208fac19.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;going-deeper-runtime-parser-generation&quot;&gt;Going deeper: &lt;em&gt;runtime parser generation&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;From before, our &lt;em&gt;parser combinator&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexSyntaxParser&lt;/code&gt; is built out of multiple parsers (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regex...Parser&lt;/code&gt;) and ultimately produces an AST describing the syntax for a given regex.&lt;/p&gt;

&lt;p&gt;We can use the same combinatorial principle here to introduce a new &lt;em&gt;parser generator&lt;/em&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexParser&lt;/code&gt; which uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexSyntaxParser&lt;/code&gt; to create a &lt;em&gt;brand new parser at runtime&lt;/em&gt; that is capable of parsing the actual semantics the regex describes - forming a full regex engine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110528627-94eecf00-80d5-11eb-8fb6-f6bb051d9394.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-note-about-traditional-regex-engines&quot;&gt;A note about traditional regex engines&lt;/h2&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Revised Mar 10, 2021&lt;/em&gt; to clarify a misunderstanding I had about about the difference between DFA and NFA regex engines. Thanks &lt;a href=&quot;https://news.ycombinator.com/item?id=26419048&quot;&gt;@burntsushi&lt;/a&gt; for helping me to learn!&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Production grade regex engines are either &lt;em&gt;finite automata based&lt;/em&gt; or &lt;em&gt;backtracking based&lt;/em&gt;, and are described in great detail in &lt;a href=&quot;https://swtch.com/~rsc/regexp/regexp1.html&quot;&gt;Russ Cox’s article here&lt;/a&gt; and &lt;a href=&quot;https://swtch.com/~rsc/regexp/regexp2.html&quot;&gt;his second article here&lt;/a&gt; covering the virtual-machine approach commonly used in regex engines.&lt;/p&gt;

&lt;p&gt;It’s worth noting that combinatorial parsing and generating parsers at runtime is very much an &lt;em&gt;uncommon&lt;/em&gt; method of implementing a regular expression engine. This is &lt;em&gt;somewhat&lt;/em&gt; close to what &lt;a href=&quot;https://comby.dev&quot;&gt;Comby&lt;/a&gt; does in practice, although we use a runtime parser generator instead of parser parser combinators.&lt;/p&gt;

&lt;p&gt;One could argue this makes what we’re parsing not strictly &lt;em&gt;regular expressions&lt;/em&gt;, although as Larry Wall (author of the Perl programming language) &lt;a href=&quot;https://raku.org/archive/doc/design/apo/A05.html&quot;&gt;writes&lt;/a&gt;, neither are the modern “regexp” pattern matchers you are likely used to:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Regular expressions” […] are only marginally related to real regular expressions. Nevertheless, the term has grown with the capabilities of our pattern matching engines, so I’m not going to try to fight linguistic necessity here. I will, however, generally call them “regexes” (or “regexen”, when I’m in an Anglo-Saxon mood).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;implementing-the-parser-interface&quot;&gt;Implementing the Parser interface&lt;/h2&gt;

&lt;p&gt;Parser combinators &lt;em&gt;tend&lt;/em&gt; to be written in higher-level languages with much fancier type-systems such as Haskell and OCaml, which lend themselves well to higher-order functions like parser combinators.&lt;/p&gt;

&lt;p&gt;We’ll be implementing this in &lt;a href=&quot;https://ziglang.org&quot;&gt;Zig&lt;/a&gt;, which is a new low-level language aiming to be a better C.&lt;/p&gt;

&lt;h3 id=&quot;compile-time-vs-run-time&quot;&gt;Compile-time vs. run-time&lt;/h3&gt;

&lt;p&gt;Zig has very cool &lt;a href=&quot;https://ziglang.org/documentation/master/#comptime&quot;&gt;compile-time code execution semantics&lt;/a&gt; which help provide its generics. We’ll be exploring these a bit, but since we want to ultimately &lt;em&gt;build parser generators at runtime&lt;/em&gt; (in order to execute a regexp) what we’ll be looking at is mostly &lt;em&gt;runtime parser interfaces&lt;/em&gt; rather than &lt;em&gt;compile-time parser interfaces&lt;/em&gt; (which are very much possible!)&lt;/p&gt;

&lt;p&gt;Since we’ll be dealing with heap allocations, our parser will not be able to run at comptime for now. Once &lt;a href=&quot;https://github.com/ziglang/zig/issues/1291&quot;&gt;Zig gets comptime heap allocations&lt;/a&gt; this should be possible and opens up interesting new opportunities.&lt;/p&gt;

&lt;h3 id=&quot;the-parser-interface&quot;&gt;The parser interface&lt;/h3&gt;

&lt;p&gt;We need an interface in Zig which describes a &lt;em&gt;parser&lt;/em&gt; as we previously mentioned:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110372092-1c234080-800b-11eb-8095-654c3c81354d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here it is - there’s a lot to unpack here so we’ll walk through it step-by-step:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@This&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;callconv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;callconv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;zig-generics-are-provided-via-type-parameters&quot;&gt;Zig generics are provided via type parameters&lt;/h3&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a Zig function which takes two arbitrary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; arguments at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comptime&lt;/code&gt;, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader&lt;/code&gt;. Uppercase is used to denote the name of a type in Zig. Thes are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; will be the type of the actual value that the parser will produce (e.g. a string of matched text, or an AST note.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader&lt;/code&gt; will be the type of the actual source of the raw text to parse (we’ll cover this more later.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function itself &lt;em&gt;returns a new type&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What we’re seeing here is the key way in which &lt;a href=&quot;https://ziglang.org/documentation/master/#Generic-Data-Structures&quot;&gt;Zig approaches generic data structures&lt;/a&gt;: you merely pass around types as parameters - as if they were values - and you write functions which take types as parameters and return types as values. Some examples of valid calls to this function are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser(u8, []u8)&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u8&lt;/code&gt; is an unsigned 8-bit integer and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]u8&lt;/code&gt; is a slice of unsigned 8-bit integers.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser([]const u8, @TypeOf(reader))&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]const u8&lt;/code&gt; is describing a slice of UTF-8 text (a string) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reader&lt;/code&gt; is some reader type, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.io.fixedBufferStream(&quot;foobar&quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;zig-runtime-interfaces&quot;&gt;Zig runtime interfaces&lt;/h3&gt;

&lt;p&gt;Now, since we’re trying to define an interface whose actual implementation can be swapped out &lt;em&gt;at runtime&lt;/em&gt; - what we need is pretty simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct&lt;/code&gt; type which has the methods we want every implementation to provide.&lt;/li&gt;
  &lt;li&gt;Those methods to &lt;em&gt;call function pointers&lt;/em&gt; which are defined as &lt;em&gt;fields&lt;/em&gt; of our struct.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, if someone wants to implement our interface they just need to create a new instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; and populate the fields (callbacks) so their implementation is called when the interface is used.&lt;/p&gt;

&lt;p&gt;This is the same pattern used by the Zig &lt;a href=&quot;https://sourcegraph.com/github.com/ziglang/zig/-/blob/lib/std/mem/Allocator.zig&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.mem.Allocator&lt;/code&gt; interface&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our case here, the returned struct has a method that consumers of the interface would invoke called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; - and the function pointer field that implementors will set to get a callback is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_parse&lt;/code&gt; field:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110578739-ad390b00-8122-11eb-816c-09e1e281db9d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;type-parameters&quot;&gt;Type parameters&lt;/h3&gt;

&lt;p&gt;Let’s look at some of the data types going around here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110578578-60553480-8122-11eb-897b-e52e2d45eede.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few other notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error!?Value&lt;/code&gt; is just describing the function can return an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt; OR no value OR a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; type. See Zig’s &lt;a href=&quot;https://ziglang.org/documentation/master/#Error-Union-Type&quot;&gt;error union types&lt;/a&gt; and &lt;a href=&quot;https://ziglang.org/documentation/master/#Optionals&quot;&gt;optional types&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callconv(.Inline)&lt;/code&gt; is just telling the compiler to inline the function call - since our function isn’t doing a ton.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;errors-the-parser-interface-can-produce&quot;&gt;Errors the Parser interface can produce&lt;/h3&gt;

&lt;p&gt;Our error type might start out looking something like this:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EndOfStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error{...}&lt;/code&gt; describes &lt;a href=&quot;https://ziglang.org/documentation/master/#Error-Set-Type&quot;&gt;a set of potential errors&lt;/a&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|| std.mem.Allocator.Error&lt;/code&gt; merely says to &lt;em&gt;merge&lt;/em&gt; the allocator type’s error set with ours - so our potential set of errors includes &lt;em&gt;ours and theirs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As we start performing different operations within parsers, it will become more complex to describe more potential sources of errors:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EndOfStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Utf8InvalidStartByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;ReadError&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;SeekError&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Zig can often &lt;a href=&quot;https://ziglang.org/documentation/master/#Inferred-Error-Sets&quot;&gt;infer error sets&lt;/a&gt; but only in some contexts today.&lt;/p&gt;

&lt;h2 id=&quot;our-first-parser&quot;&gt;Our first Parser&lt;/h2&gt;

&lt;p&gt;All we need to do in order to implement a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; is provide the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_parse&lt;/code&gt; method, and define its return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; type and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader&lt;/code&gt; input type:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above, the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const parser: T&lt;/code&gt; is denoting the type of the constant named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parser&lt;/code&gt; - in this case it’ll be the type returned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser([]u8, @TypeOf(reader))&lt;/code&gt;. And this:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is the Zig syntax for populating a struct. We’re setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_parse&lt;/code&gt; field to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myParse&lt;/code&gt;. Zig can infer the type of the struct if you write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.{}&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T{}&lt;/code&gt; - which avoids the need for us to repeat the call to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser()&lt;/code&gt; function which is verbose.&lt;/p&gt;

&lt;h3 id=&quot;what-actually-is-a-reader&quot;&gt;What actually is a “Reader”?&lt;/h3&gt;

&lt;p&gt;Up to this point, we’ve just talked about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader&lt;/code&gt; as being &lt;em&gt;any type&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Similar to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; interface, the Zig standard library &lt;a href=&quot;https://sourcegraph.com/github.com/ziglang/zig@f2b96782ecdc9e2f8740eb7d294203b2a585ea52/-/blob/lib/std/io/reader.zig#L13-20&quot;&gt;provides a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.io.Reader&lt;/code&gt; interface&lt;/a&gt; and there are &lt;a href=&quot;https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/ziglang/zig%24+file:%5Elib/std/+fn+reader%28&amp;amp;patternType=literal&quot;&gt;many implementors of it&lt;/a&gt; including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.fs.File&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.io.fixedBufferStream(&quot;foobar&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.net.Stream&lt;/code&gt; (network sockets)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, in contrast to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; type which invokes &lt;em&gt;function pointers&lt;/em&gt; at runtime, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.io.Reader&lt;/code&gt; interface is a &lt;em&gt;compile time type&lt;/em&gt; - meaning calls to the underlying implementation do not involve a pointer dereference.&lt;/p&gt;

&lt;p&gt;Today, Zig is in early stages (version 0.7) and does not have anything like an interface or trait type (although &lt;a href=&quot;https://github.com/ziglang/zig/issues/1268&quot;&gt;it seems likely this will be improved in the future&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;This means that, for now, we cannot simply define our function as accepting &lt;em&gt;only&lt;/em&gt; an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.io.Reader&lt;/code&gt; interface - instead we must declare that we accept &lt;em&gt;any type&lt;/em&gt; which we’ll call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader&lt;/code&gt;, write our code &lt;em&gt;as if it is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.io.Reader&lt;/code&gt;&lt;/em&gt; - and the compiler will just barf if anybody passes something in that &lt;em&gt;isn’t&lt;/em&gt; an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.io.Reader&lt;/code&gt;. This can sometimes lead to confusing compiler error messages (“there’s an error in the standard library code? Ah, no, I just needed to pass a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.reader()&lt;/code&gt;!”).&lt;/p&gt;

&lt;h3 id=&quot;a-parser-that-parses-a-literal-string&quot;&gt;A Parser that parses a literal string&lt;/h3&gt;

&lt;p&gt;If we want a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; interface implementation that parses a specific string literal, one way to do that is to also make that a generic function which accepts &lt;em&gt;any&lt;/em&gt; reader type (so we’re not restricted to e.g. just file inputs):&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// TODO&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is pretty good - but we need some way to have the type we return &lt;em&gt;implement&lt;/em&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; interface we defined. The way to do this is by defining a field in our struct:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now a consumer can write the following to get a literal string parser:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;@TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;passing-parameters-to-a-parser-implementation&quot;&gt;Passing parameters to a parser implementation&lt;/h3&gt;

&lt;p&gt;If we want our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Literal&lt;/code&gt; parser to accept a parameter – the literal string to look for – we need to give it a parameter.&lt;/p&gt;

&lt;p&gt;In the case of merely passing it a string, we &lt;em&gt;could&lt;/em&gt; adjust the signature so that this is possible:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, we’ll define ours using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; method which is more common in Zig data structures:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@This&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// The `want` string must stay alive for as long as the parser will be used.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;want&lt;/code&gt; is the string literal we want to match - and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]const u8&lt;/code&gt; is Zig’s string type. It describes a slice of immutable (non-modifiable) encoded UTF-8 bytes.&lt;/p&gt;

&lt;p&gt;Unlike C, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]const u8&lt;/code&gt; being a slice means it is &lt;em&gt;a pointer to the string in memory and its length&lt;/em&gt; - so we don’t have to pass around the length parameter separately or use a null-terminated string. In Zig, there are two ways to represent a string:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]const u8&lt;/code&gt; (unmodifiable string, most common)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]u8&lt;/code&gt; (modifiable string)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;understanding-zigs-wildconfusing-fieldparentptr&quot;&gt;Understanding Zig’s wild/confusing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@fieldParentPtr&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;We’re finally ready to actually have our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Literal&lt;/code&gt; parser &lt;em&gt;parse&lt;/em&gt; something! We just need to implement our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@This&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;callconv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@fieldParentPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But wait a minute! In order for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;._parse = parse,&lt;/code&gt; assignment to work the first argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; needs to be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; parameter for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser([]u8, Reader)&lt;/code&gt; - so how does &lt;em&gt;our&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; implementation method get to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;want&lt;/code&gt; field of our struct?&lt;/p&gt;

&lt;p&gt;This is where some Zig magic comes in: on obscure builtin function we can use inside of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const self = @fieldParentPtr(Self, &quot;parser&quot;, parser);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To understand this, first let’s get a look at what these parameters are referring to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3173176/110593977-7b7f6e80-8139-11eb-8ecc-41dff5766ec2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see from the Zig documentation that this function operates as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given a pointer to a field, returns the base pointer of a struct.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in our case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Self&lt;/code&gt; is the “parent struct” we’re trying to acquire a reference to (our type)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;parser&quot;&lt;/code&gt; is the name of our struct’s field.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parser&lt;/code&gt; is the &lt;em&gt;pointer to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parser&lt;/code&gt; struct field&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully you can start to see the link here: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parser&lt;/code&gt; is a pointer to &lt;em&gt;our struct field&lt;/em&gt;, so Zig has a little helper &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@fieldParentPtr&lt;/code&gt; which can rely on that fact to give us &lt;em&gt;our struct&lt;/em&gt; given a pointer to &lt;em&gt;our struct field&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implementing-the-rest-of-parse&quot;&gt;Implementing the rest of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Our full &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; method will look like this:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// If a value is returned, it is up to the caller to free it.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;callconv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@fieldParentPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;errdefer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seekableStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seekBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;@intCast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// parsing failed&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a few notable things here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We’re trying to return a string from our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; function, i.e. the value it emits is a string (instead of an AST node).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;want&lt;/code&gt; string we &lt;em&gt;got&lt;/em&gt; inside of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; method is agreed to only be valid while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; will still be called. We’ve decided to create a contract that all of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; implementations will either not hold onto memory given by others - or if they do, only do so until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; returns. Hence, we need to allocate a new string in our method.&lt;/li&gt;
  &lt;li&gt;Normally we could rely solely on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defer&lt;/code&gt; (“run at end of function”) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errdefer&lt;/code&gt; (“run if an error is returned”), but since we’ve chosen to reserve the &lt;em&gt;none optional&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; as “we didn’t parse anything” we need to manually free if we &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return null;&lt;/code&gt;. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nulldefer&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;somedefer&lt;/code&gt; could be nice, maybe?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Putting it all together, you’ll get something like this: &lt;a href=&quot;https://gist.github.com/slimsag/8f098a13177b4bc008a7741505819f90&quot;&gt;GitHub gist&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;our-first-parser-combinator&quot;&gt;Our first &lt;em&gt;parser combinator&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;To demonstrate how a &lt;em&gt;parser combinator&lt;/em&gt; would be implemented, we’ll try implementing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneOf&lt;/code&gt; operator. It will take any number of &lt;em&gt;parsers&lt;/em&gt; as input and run them consecutively until one succeeds or none do.&lt;/p&gt;

&lt;p&gt;Let’s first start by writing out the basic structure of our function:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice here that in contrast to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Literal&lt;/code&gt; &lt;em&gt;parser&lt;/em&gt; function from earlier, this function takes a second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comptime Value: type&lt;/code&gt; parameter. This is because we want it to work with any existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; implementation, regardless of what type of value it produces.&lt;/p&gt;

&lt;p&gt;We can start to fill in the type by adding our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@This&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// `parsers` slice must stay alive for as long as the parser will be&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// used.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;parsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see here, we’re going to simply take in a list of pointers to parsers. They’ll all need to have the same return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; as was specified in the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneOf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One reason for this is that &lt;a href=&quot;https://github.com/ziglang/zig/issues/447&quot;&gt;Zig does not support &lt;em&gt;return type inference&lt;/em&gt;&lt;/a&gt;. You can have a function which takes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anytype&lt;/code&gt; as a parameter, but it cannot return an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anytype&lt;/code&gt;. This just means we need to have a generic function (in this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneOf&lt;/code&gt;) which accepts a type parameter and then use that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; type later. In a language like Haskell or OCaml, this would not be true.&lt;/p&gt;

&lt;p&gt;Finally, we can implement our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;comptime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// Caller is responsible for freeing the value, if any.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;callconv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@fieldParentPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;parsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_of_parser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_of_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a few things to unpack here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try one_of_parser.parse(allocator, src);&lt;/code&gt; indicates that if parsing using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one_of_parser&lt;/code&gt; returns an &lt;em&gt;error&lt;/em&gt; that our function should return immediately and not continue attempting to parse with other parsers.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (result != null) {&lt;/code&gt; is how you check if an Optional type in Zig is “None”. I find this pretty interesting: it’s not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, it’s actually an optional “none” type - but it is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;. I’m not sure why, but can imagine this making the language friendlier to people unfamiliar with optional types.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-our-oneof-parser-combinator&quot;&gt;Using our OneOf parser combinator&lt;/h2&gt;

&lt;p&gt;Now for the cool part: we get to put both our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Literal&lt;/code&gt; parser and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneOf&lt;/code&gt; parser combinator to &lt;em&gt;build a new parser&lt;/em&gt;!&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Define our parser.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;@TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;@TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sheep&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;@TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above will parse one of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;sheep&quot;&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; from the input reader.&lt;/p&gt;

&lt;p&gt;We’re passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TypeOf(reader)&lt;/code&gt; frequently above which makes the code a bit more cryptic than needed, and it would be possible to introduce a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneOfLiteral&lt;/code&gt; helper which makes the above instead read:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Define our parser.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneOfLiteral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;@TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;sheep&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One thing to unpack here is this syntax for passing an array to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;.{...}&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The function takes a parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsers: []*Parser(Value, Reader)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.{...}&lt;/code&gt; would give us &lt;em&gt;a fixed size array&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[3]*Parser(Value, Reader)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;.{}&lt;/code&gt; gives us a pointer to an array, i.e. &lt;em&gt;a slice&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]*Parser(Value, Reader)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since our list is known at compile time, we don’t have to allocate or free memory for the slice. If our list was dynamic, we would need to do so.&lt;/p&gt;

&lt;p&gt;Finally, we can actually use our parser above:&lt;/p&gt;

&lt;div class=&quot;language-zig highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expectEqualStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;runtime-parser-generation&quot;&gt;Runtime parser generation&lt;/h2&gt;

&lt;p&gt;You might be wondering how we would go from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Literal&lt;/code&gt; &lt;em&gt;parser&lt;/em&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneOf&lt;/code&gt; &lt;em&gt;parser combinator&lt;/em&gt; to actually &lt;em&gt;generating a parser at runtime that can parse the semantics defined in a regexp string&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Since our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; interface is a runtime interface (you can swap out the implementation at runtime) and since our parser combinator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneOf&lt;/code&gt; operates using that interface (only the return value must be known at compile time, it could be a generic AST node) it means that we can easily dynamically create slices of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]*Parser(...)&lt;/code&gt; at runtime based on the result of a parser combinator we have built - like our “dog, cat, sheep” parser from earlier.&lt;/p&gt;

&lt;p&gt;The challenge left for you as a reader is to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write &lt;em&gt;parsers&lt;/em&gt; like our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Literal&lt;/code&gt; parser that can parse the components of our regexp &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[bc].*abc&lt;/code&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexLiteralParser&lt;/code&gt; can parse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;, but not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abc&lt;/code&gt; (the string.)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexRangeOpenParser&lt;/code&gt; can parse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexRangeCloseParser&lt;/code&gt; can parse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexAnyParser&lt;/code&gt; can parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; “any character” syntax.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexRepetitionParser&lt;/code&gt; can parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; repetition operator.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Write a &lt;em&gt;parser combinators&lt;/em&gt; like our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneOf&lt;/code&gt; parser, except have it parse a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequence&lt;/code&gt; of parsers.&lt;/li&gt;
  &lt;li&gt;Use our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequence&lt;/code&gt; parser combinator and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexLiteralParser&lt;/code&gt; to build a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexStringLiteralParser&lt;/code&gt; - similar to how we built out “dog, cat, sheep” parser.&lt;/li&gt;
  &lt;li&gt;Write a &lt;em&gt;new kind of function&lt;/em&gt; called a &lt;em&gt;runtime parser generator&lt;/em&gt; named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexParser&lt;/code&gt; which will be super familiar:
    &lt;ul&gt;
      &lt;li&gt;Take in a &lt;em&gt;parser combinator&lt;/em&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegexSyntaxParser&lt;/code&gt; which can turn your regexp syntax into some intermediary like an AST.&lt;/li&gt;
      &lt;li&gt;Have your function &lt;em&gt;use parser combinators like OneOf, Sequence, etc.&lt;/em&gt; to build a brand new parser at runtime based on that intermediary AST.&lt;/li&gt;
      &lt;li&gt;Return that new parser which parses the actual semantics described by the input regexp!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;I am sorry for not giving you a full (or even partial) regex engine :) I am still exploring this and it is a large undertaking, this blog post would be far too long if it was included.&lt;/p&gt;

&lt;p&gt;You can find a copy of the final code with &lt;em&gt;parsers&lt;/em&gt; and &lt;em&gt;parser combinators&lt;/em&gt; &lt;a href=&quot;https://gist.github.com/slimsag/db2dd2c49aa038e23b654120e70c9b00&quot;&gt;here&lt;/a&gt;. Just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zig init-exe&lt;/code&gt; and plop them into your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;You may also want to check out &lt;a href=&quot;https://github.com/Hejsil/mecha&quot;&gt;Mecha&lt;/a&gt;, a parser combinator library for Zig.&lt;/p&gt;

&lt;p&gt;If anything was unclear or confusing, I’m happy to help: shoot me an email stephen@hexops.com or leave a comment on Hacker News / Reddit and I’ll follow up.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="zig," />
      
        <category term="regex," />
      
        <category term="parsers" />
      

      

      
        <summary type="html">In this article we will be exploring what parser combinators are, what runtime parser generation is - why they’re useful, and then walking through a Zig implementation of them.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Postgres regex search over 10,000 GitHub repositories (using only a Macbook)</title>
      
      
      <link href="/2021/postgres-regex-search-over-10000-github-repositories" rel="alternate" type="text/html" title="Postgres regex search over 10,000 GitHub repositories (using only a Macbook)" />
      
      <published>2021-02-17T00:00:00+00:00</published>
      <updated>2021-02-17T00:00:00+00:00</updated>
      <id>/2021/postgres-regex-search-over-10000-github-repositories</id>
      <content type="html" xml:base="/2021/postgres-regex-search-over-10000-github-repositories">&lt;p&gt;In this article, we share empirical measurements from our experiments in using Postgres to index and search over 10,000 top GitHub repositories using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_trgm&lt;/code&gt; on only a Macbook.&lt;/p&gt;

&lt;p&gt;This is a follow up to &lt;a href=&quot;https://devlog.hexops.com/2021/postgres-trigram-search-learnings&quot;&gt;“Postgres Trigram search learnings”&lt;/a&gt;, in which we shared several learnings and beliefs about trying to use Postgres Trigram indexes as an alterative to Google’s &lt;a href=&quot;https://github.com/google/zoekt&quot;&gt;Zoekt&lt;/a&gt; (“Fast trigram based code search”).&lt;/p&gt;

&lt;p&gt;We share our results, as well as &lt;a href=&quot;https://github.com/hexops/pgtrgm_emperical_measurements&quot;&gt;the exact steps we performed, scripts, and lists of the top 20,000 repositories by stars/language on GitHub&lt;/a&gt; so you can reproduce the results yourself should you desire.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This article is extensive and more akin to a research paper than a blog post.&lt;/strong&gt; If you’re interested in our conclusions, see &lt;a href=&quot;#conclusions&quot;&gt;conclusions&lt;/a&gt; instead.&lt;/p&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;

&lt;p&gt;We wanted to get empirical measurements for how suitable Postgres is in providing regexp search over documents, e.g. as an alterative to Google’s &lt;a href=&quot;https://github.com/google/zoekt&quot;&gt;Zoekt&lt;/a&gt; (“Fast trigram based code search”). In specific:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many repositories can we index on just a 2019 Macbook Pro?&lt;/li&gt;
  &lt;li&gt;How fast are different regexp searches over the corpus?&lt;/li&gt;
  &lt;li&gt;What Postgres 13 configuration gives best results?&lt;/li&gt;
  &lt;li&gt;What other operational effects need consideration if seriously attempting to use Postgres as the backend for a regexp search engine?&lt;/li&gt;
  &lt;li&gt;What is the best database schema to use?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;/h2&gt;

&lt;p&gt;We ran all tests on a 2019 Macbook Pro with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2.3 GHz 8-Core Intel Core i9&lt;/li&gt;
  &lt;li&gt;16 GB 2667 MHz DDR4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During test execution, few other Mac applications were in use such that effectively all CPU/memory was available to Postgres.&lt;/p&gt;

&lt;h2 id=&quot;corpus&quot;&gt;Corpus&lt;/h2&gt;

&lt;p&gt;We scraped &lt;a href=&quot;https://github.com/hexops/pgtrgm_emperical_measurements/tree/main/top_repos&quot;&gt;lists of the top 1,000 repositories from the GitHub search API&lt;/a&gt; ranked by stars for each of the following languages (~20.5k repositories in total):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C++, C#, CSS, Go, HTML, Java, JavaScript, MatLab, ObjC, Perl, PHP, Python, Ruby, Rust, Shell, Solidity, Swift, TypeScript, VB .NET, and Zig.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloning all ~20.5k repositories in parallel took ~14 hours with a fast ~100 Mbps connection to GitHub’s servers.&lt;/p&gt;

&lt;h3 id=&quot;dataset-reduction&quot;&gt;Dataset reduction&lt;/h3&gt;

&lt;p&gt;We found the amount of disk space required by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone --depth 1&lt;/code&gt; on these repositories to be a sizable ~412G for just 12,148 repositories - and so we put in place several processes for further reduce the dataset size by about 66%:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Removing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; directories resulted in a 30% reduction (412G -&amp;gt; 290G, for 12,148 repositories)&lt;/li&gt;
  &lt;li&gt;Removing files &amp;gt; 1 MiB resulted in another 51% reduction (290G -&amp;gt; 142G, for 12,148 repositories - note GitHub does not index files &amp;gt; 384 KiB in their search engine)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;database-insertion&quot;&gt;Database insertion&lt;/h2&gt;

&lt;p&gt;We &lt;a href=&quot;https://github.com/hexops/pgtrgm_emperical_measurements/blob/main/cmd/corpusindex/main.go&quot;&gt;concurrently inserted&lt;/a&gt; the entire corpus into Postgres, with the following DB schema:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXTENSION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg_trgm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigserial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In total, this took around ~8 hours to complete and Postgres’s entire on-disk utilization was 101G.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-trigram-index&quot;&gt;Creating the Trigram index&lt;/h2&gt;

&lt;p&gt;We tried three separate times to index the dataset using the following GIN Trigram index:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE INDEX IF NOT EXISTS files_contents_trgm_idx ON files USING GIN (contents gin_trgm_ops);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;In the first attempt, we hit an OOM after 11 hours and 34 minutes.&lt;/strong&gt; This was due to a rapid spike in memory usage at the very end of indexing. We used a &lt;a href=&quot;https://github.com/hexops/pgtrgm_emperical_measurements#configuration-attempt-1-indexing-failure-oom&quot;&gt;fairly aggressive&lt;/a&gt; Postgres configuration with a very large max WAL size, so it was not entirely unexpected.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;In the second attempt, we ran out of SSD disk space after ~27 hours&lt;/strong&gt;. Notable is that the disk space largely grew towards the end of indexing, similar to when we faced an OOM - it was not a gradual increase over time. For this attempt, we used the excellent &lt;a href=&quot;https://pgtune.leopard.in.ua/#/&quot;&gt;pgtune&lt;/a&gt; tool to reduce our first Postgres configuration as follows:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shared_buffers = 4GB → 2560MB
effective_cache_size = 12GB → 7680MB
maintenance_work_mem = 16GB → 1280MB
default_statistics_target = 100 → 500
work_mem = 5242kB → 16MB
min_wal_size = 50GB → 4GB
max_wal_size = 4GB → 16GB
max_parallel_workers_per_gather = 8 → 4
max_parallel_maintenance_workers = 8 → 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;In our third and final attempt, we cut the dataset in half and indexing succeeded after 22 hours.&lt;/strong&gt; In specific, we deleted half of the files in the database (from 19,441,820 files / 178GiB of data to 9,720,910 files / 82 GiB of data.) The Postgres configuration used was the same as in attempt 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;indexing-performance-memory-usage&quot;&gt;Indexing performance: Memory usage&lt;/h2&gt;

&lt;p&gt;In our first attempt, we see the reported &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker stats&lt;/code&gt; memory usage of the container grow up to 12 GiB (chart shows MiB of memory used over time):&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;981&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/107313722-56bbac80-6a50-11eb-94c7-8e13ea095053.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In our second and third attempts, we see far less memory usage (~1.6 GiB consistently):&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;980&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/107314104-350ef500-6a51-11eb-909f-2f1b524d29b2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;980&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/107315387-ce3f0b00-6a53-11eb-886c-410f000f73bd.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;indexing-performance-cpu-usage&quot;&gt;Indexing performance: CPU usage&lt;/h2&gt;

&lt;p&gt;Postgres’ Trigram indexing appears to be mostly single-threaded (at least when indexing &lt;em&gt;a single table&lt;/em&gt;, we test multiple tables later.)&lt;/p&gt;

&lt;p&gt;In our first attempt, CPU usage for the container did not rise above 156% (one and a half virtual CPU cores):&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;982&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/107313915-cc277d00-6a50-11eb-9282-62159a127966.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our second attempt was around 150-200% CPU usage on average:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;980&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/107314168-507a0000-6a51-11eb-8a18-ec18752f7f16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our third attempt similarly saw an average of 150-200%, but with a brief spike towards the end to ~350% CPU:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;980&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/107315239-8324f800-6a53-11eb-9a5b-fcc61d1a7b59.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;indexing-performance-disk-io&quot;&gt;Indexing performance: Disk IO&lt;/h2&gt;

&lt;p&gt;Disk reads/writes during indexing averaged about ~250 MB/s for reads (blue) and writes (red). Native in-software tests show the same Macbook able to achieve read/write speeds of ~860 MB/s with &amp;lt;5% affect on CPU utilization.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Addition made Feb 20, 2021:&lt;/small&gt; We ran tests using native Postgres as well (instead of in Docker with a bind mount) and found better indexing and query performance, more on this below.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;599&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/106507903-ec6f9e80-6488-11eb-88a8-78e5b7aacfd6.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;indexing-performance-disk-space&quot;&gt;Indexing performance: Disk space&lt;/h2&gt;

&lt;p&gt;The database contains 9,720,910 files totalling 82.07 GiB:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;postgres=# select count(filepath) from files;
  count  
---------
 9720910
(1 row)

postgres=# select SUM(octet_length(contents)) from files;
     sum     
-------------
 88123563320
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Before indexing&lt;/strong&gt;, we find that all of Postgres is consuming 54G:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ du -sh .postgres/
 54G	.postgres/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE INDEX&lt;/code&gt;, Postgres uses:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ du -sh .postgres/
 73G	.postgres/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thus, the index size for 82 GiB of text is 19 GiB (or 23% of the data size.)&lt;/p&gt;

&lt;h2 id=&quot;database-startup-times&quot;&gt;Database startup times&lt;/h2&gt;

&lt;p&gt;From an operational standpoint, it is worth noting that if Postgres is starting clean (i.e. previous shutdown was graceful) then startup time is almost instantaneous: it begins accepting connections immediately and loads the index as needed.&lt;/p&gt;

&lt;p&gt;However, if Postgres experienced a non-graceful termination during e.g. startup, it can take a hefty ~10 minutes with this dataset to start as it goes through an automated recovery process.&lt;/p&gt;

&lt;h2 id=&quot;queries-executed&quot;&gt;Queries executed&lt;/h2&gt;

&lt;p&gt;In total, we executed 19,936 search queries against the index. We chose queries which we expect give reasonably varying amounts of coverage over the trigram index (that is, queries whose trigrams are more or less likely to occur in many files):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Regexp query&lt;/th&gt;
      &lt;th&gt;Matching # files in entire dataset&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;unknown (2m+ suspected)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;1,479,452&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123456789&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;59,841&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Error&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;127,895&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Println&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;22,876&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bytes.Buffer&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;34,554&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Print.*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;37,319&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ac8ac5d63b66b83b90ce41a2d4061635&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d97f1d3ff91543[e-f]49.8b07517548877&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;details&gt;
&lt;summary&gt;Detailed breakdown&lt;/summary&gt;
&lt;div&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;Query&lt;/th&gt;
          &lt;th&gt;Result Limit&lt;/th&gt;
          &lt;th&gt;Times executed&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;unlimited&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error'&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;2000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error'&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;2000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error'&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
          &lt;td&gt;200&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error'&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;unlimited&lt;/td&gt;
          &lt;td&gt;18&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123456789&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123456789&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123456789&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123456789&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;unlimited&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Error&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Error&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Error&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Error&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;unlimited&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Println&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Println&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Println&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Println&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;unlimited&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bytes.Buffer&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bytes.Buffer&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bytes.Buffer&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bytes.Buffer&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;unlimited&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Print.*&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Print.*&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Print.*&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt\.Print.*&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;unlimited&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ac8ac5d63b66b83b90ce41a2d4061635&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ac8ac5d63b66b83b90ce41a2d4061635&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ac8ac5d63b66b83b90ce41a2d4061635&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ac8ac5d63b66b83b90ce41a2d4061635&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;unlimited&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d97f1d3ff91543[e-f]49.8b07517548877&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d97f1d3ff91543[e-f]49.8b07517548877&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d97f1d3ff91543[e-f]49.8b07517548877&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1000&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d97f1d3ff91543[e-f]49.8b07517548877&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;unlimited&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;h2 id=&quot;query-performance&quot;&gt;Query performance&lt;/h2&gt;

&lt;p&gt;In total, we executed 19,936 search queries against the database (linearly, not in parallel) which completed in the following times:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Time bucket&lt;/th&gt;
      &lt;th&gt;Percentage of queries&lt;/th&gt;
      &lt;th&gt;Number of queries&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Under 50ms&lt;/td&gt;
      &lt;td&gt;30%&lt;/td&gt;
      &lt;td&gt;5,933&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Under 250ms&lt;/td&gt;
      &lt;td&gt;41%&lt;/td&gt;
      &lt;td&gt;8,088&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Under 500ms&lt;/td&gt;
      &lt;td&gt;52%&lt;/td&gt;
      &lt;td&gt;10,275&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Under 750ms&lt;/td&gt;
      &lt;td&gt;63%&lt;/td&gt;
      &lt;td&gt;12,473&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Under 1s&lt;/td&gt;
      &lt;td&gt;68%&lt;/td&gt;
      &lt;td&gt;13,481&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Under 1.5s&lt;/td&gt;
      &lt;td&gt;74%&lt;/td&gt;
      &lt;td&gt;14,697&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Under 3s&lt;/td&gt;
      &lt;td&gt;79%&lt;/td&gt;
      &lt;td&gt;15,706&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Under 25s&lt;/td&gt;
      &lt;td&gt;79%&lt;/td&gt;
      &lt;td&gt;15,708&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Under 30s&lt;/td&gt;
      &lt;td&gt;99%&lt;/td&gt;
      &lt;td&gt;19,788&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;query-performance-vs-planning-time&quot;&gt;Query performance vs. planning time&lt;/h2&gt;

&lt;p&gt;The following scatter plot shows how 79% of queries executed in under 3s (Y axis, in ms), while Postgres’s query planner had planned them for execution in under 100-250ms generally (X axis, in ms):&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1252&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/107848471-ef379100-6db0-11eb-8396-4d156a179aae.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we expand the view to include all queries, we start to get a picture of just how outlier these 21% of queries are (note that the small block of dots in the bottom left represents the same diagram shown above):&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1250&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/107848517-3cb3fe00-6db1-11eb-9652-e65d7d88fe36.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;query-time-vs-cpu--memory-usage&quot;&gt;Query time vs. CPU &amp;amp; Memory usage&lt;/h2&gt;

&lt;p&gt;The following image shows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(top) Query time in milliseconds&lt;/li&gt;
  &lt;li&gt;(middle) CPU usage percentage (e.g. 801% refers to 8 out of 16 virtual CPU cores being consumed)&lt;/li&gt;
  &lt;li&gt;(bottom) Memory usage in MiB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;1255&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/107848716-efd12700-6db2-11eb-8e8b-a8141a6bdb0b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notable insights from this are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The large increase in resource usage towards the end is when we began executing queries with no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIMIT&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;CPU usage does not exceed 138%, until the spike at the end.&lt;/li&gt;
  &lt;li&gt;Memory usage does not exceed 42 MiB, until the spike at the end.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We suspect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_trgm&lt;/code&gt; is single-threaded within the scope of a single table, but with &lt;a href=&quot;https://www.postgresql.org/docs/10/ddl-partitioning.html&quot;&gt;table data partitioning&lt;/a&gt; (or splitting data into multiple tables with subsets of the data), we suspect better parallelism could be achieved.&lt;/p&gt;

&lt;h2 id=&quot;investigating-slow-queries&quot;&gt;Investigating slow queries&lt;/h2&gt;

&lt;p&gt;If we plot the number of index rechecks (X axis) vs. execution time (Y axis), we can clearly see one of the most significant aspects of slow queries is that they have many more index rechecks:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1036&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/107849660-fc0cb280-6db9-11eb-9c10-cb7e74366ab7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And if we look at &lt;a href=&quot;https://github.com/hexops/pgtrgm_emperical_measurements/blob/main/query_logs/query-run-3.log#L3-L24&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN ANALYZE&lt;/code&gt; output for one of these queries&lt;/a&gt; we can also confirm &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parallel Bitmap Heap Scan&lt;/code&gt; is slow due to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rows Removed by Index Recheck&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;table-splitting&quot;&gt;Table splitting&lt;/h2&gt;

&lt;p&gt;Splitting up the search index into multiple smaller tables seems like an obvious approach to getting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_trgm&lt;/code&gt; to use multiple CPU cores. We tried this by taking the same exact data set and splitting it into 200 tables, and found numerous benefits:&lt;/p&gt;

&lt;h3 id=&quot;benefit-1-incremental-indexing&quot;&gt;Benefit 1: Incremental indexing&lt;/h3&gt;

&lt;p&gt;If indexing fails after 11-27 hours, as happened to us twice in the non-splitting approach, all progress is not lost.&lt;/p&gt;

&lt;h3 id=&quot;benefit-2-parallel-indexing&quot;&gt;Benefit 2: Parallel indexing&lt;/h3&gt;

&lt;p&gt;Unlike our first non-splitting approach, which showed we were only able to utilize 1.5-2 virtual CPU cores, with multiple tables we are able to utilize 8-9 virtual CPU cores:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1143&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/108118901-3b5a2e00-705c-11eb-86d1-a7828517b2e8.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;benefit-3-indexing-is-84-faster&quot;&gt;Benefit 3: Indexing is 84% faster&lt;/h3&gt;

&lt;p&gt;Unlike our first attempt which took 22 hours in total, parallel indexing completed in only 3h27m.&lt;/p&gt;

&lt;h3 id=&quot;benefit-4-indexing-uses-69-less-memory&quot;&gt;Benefit 4: Indexing uses 69% less memory&lt;/h3&gt;

&lt;p&gt;With non-splitting we saw peak memory usage up to 12 GiB. With the same exact Postgres configuration, we were able to index with only 3.7 GiB peak memory usage:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1140&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/108119244-bd4a5700-705c-11eb-949b-69828acd7c7c.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;benefit-4-parallel-querying&quot;&gt;Benefit 4: Parallel querying&lt;/h2&gt;

&lt;p&gt;Previously, we saw CPU utilization of only 138% (1.3 virtual CPU cores), with table splitting we see CPU utilization during queries of 1600% (16 virtual CPU cores) showing we are doing work fully in parallel:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1144&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/108114005-79078880-7055-11eb-9f55-bc4ca65c4808.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, we saw memory usage average around ~380 MiB, compared to only ~42 MiB before:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1143&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/108115193-04354e00-7057-11eb-9782-8d3125c122e1.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;benefit-5-query-performance&quot;&gt;Benefit 5: Query performance&lt;/h2&gt;

&lt;p&gt;We reran the same exact set of search queries, but a smaller number of times overall (350 queries, instead of 19.9k - which we found to still be a representative enough sample.)&lt;/p&gt;

&lt;p&gt;As we can see below, table splitting in general led to a 200-300% improvement in query time for heavier queries that previously took 20-30s, now taking only 7-15s thanks to parallel querying (top chart is before, bottom is after, both in milliseconds):&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1143&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/3173176/108156053-3d90ac80-709d-11eb-8f81-b93456b54a41.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also grouped queries based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIMIT&lt;/code&gt; specified in the query and placed them into time buckets (“how many queries completed in under 50ms?”) - comparing the two shows that less complex queries and/or queries for fewer results were negatively affected slightly, while larger queries were helped substantially:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Change (positive is good)&lt;/th&gt;
      &lt;th&gt;Results limit&lt;/th&gt;
      &lt;th&gt;Bucket&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Queries in bucket before&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Queries in bucket after&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-33%&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;&amp;lt;50ms&lt;/td&gt;
      &lt;td&gt;33%&lt;/td&gt;
      &lt;td&gt;0%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+13%&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;&amp;lt;250ms&lt;/td&gt;
      &lt;td&gt;44%&lt;/td&gt;
      &lt;td&gt;57%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+33%&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;&amp;lt;1s&lt;/td&gt;
      &lt;td&gt;77%&lt;/td&gt;
      &lt;td&gt;100%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-29%&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;&amp;lt;100ms&lt;/td&gt;
      &lt;td&gt;29%&lt;/td&gt;
      &lt;td&gt;0%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+20%&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;&amp;lt;500ms&lt;/td&gt;
      &lt;td&gt;50%&lt;/td&gt;
      &lt;td&gt;70%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+19%&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;&amp;lt;10s&lt;/td&gt;
      &lt;td&gt;80%&lt;/td&gt;
      &lt;td&gt;99%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-12%&lt;/td&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;&amp;lt;250ms&lt;/td&gt;
      &lt;td&gt;12%&lt;/td&gt;
      &lt;td&gt;0%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-13%&lt;/td&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;&amp;lt;2.5s&lt;/td&gt;
      &lt;td&gt;77%&lt;/td&gt;
      &lt;td&gt;64%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+23%&lt;/td&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;&amp;lt;20s&lt;/td&gt;
      &lt;td&gt;77%&lt;/td&gt;
      &lt;td&gt;100%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+4%&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;&amp;lt;20s&lt;/td&gt;
      &lt;td&gt;0%&lt;/td&gt;
      &lt;td&gt;4%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+18%&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;&amp;lt;60s&lt;/td&gt;
      &lt;td&gt;0%&lt;/td&gt;
      &lt;td&gt;18%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Detailed comparisons are available below for those interested:&lt;/p&gt;

&lt;details&gt;
&lt;summary&gt;Queries with `LIMIT 10`&lt;/summary&gt;
&lt;div&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;Time bucket&lt;/th&gt;
          &lt;th&gt;Percentage of queries (before)&lt;/th&gt;
          &lt;th&gt;Percentage of queries (after splitting)&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;50ms&lt;/td&gt;
          &lt;td&gt;33.00% (2999 of 9004)&lt;/td&gt;
          &lt;td&gt;0% (0 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;100ms&lt;/td&gt;
          &lt;td&gt;33.00% (2999 of 9004)&lt;/td&gt;
          &lt;td&gt;1.00% (1 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;250ms&lt;/td&gt;
          &lt;td&gt;44.00% (3999 of 9004)&lt;/td&gt;
          &lt;td&gt;57.00% (57 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;500ms&lt;/td&gt;
          &lt;td&gt;55.00% (4999 of 9004)&lt;/td&gt;
          &lt;td&gt;79.00% (79 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;1000ms&lt;/td&gt;
          &lt;td&gt;77.00% (6998 of 9004)&lt;/td&gt;
          &lt;td&gt;80.00% (80 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2500ms&lt;/td&gt;
          &lt;td&gt;77.00% (7003 of 9004)&lt;/td&gt;
          &lt;td&gt;80.00% (80 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;5000ms&lt;/td&gt;
          &lt;td&gt;77.00% (7004 of 9004)&lt;/td&gt;
          &lt;td&gt;80.00% (80 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;10000ms&lt;/td&gt;
          &lt;td&gt;77.00% (7004 of 9004)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;20000ms&lt;/td&gt;
          &lt;td&gt;77.00% (7004 of 9004)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;30000ms&lt;/td&gt;
          &lt;td&gt;99.00% (8985 of 9004)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;40000ms&lt;/td&gt;
          &lt;td&gt;99.00% (9003 of 9004)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;50000ms&lt;/td&gt;
          &lt;td&gt;100.00% (9004 of 9004)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;60000ms&lt;/td&gt;
          &lt;td&gt;100.00% (9004 of 9004)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;Queries with `LIMIT 100`&lt;/summary&gt;
&lt;div&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;Time bucket&lt;/th&gt;
          &lt;th&gt;Percentage of queries (before)&lt;/th&gt;
          &lt;th&gt;Percentage of queries (after splitting)&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;50ms&lt;/td&gt;
          &lt;td&gt;29.00% (2934 of 10000)&lt;/td&gt;
          &lt;td&gt;0% (0 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;100ms&lt;/td&gt;
          &lt;td&gt;29.00% (2978 of 10000)&lt;/td&gt;
          &lt;td&gt;0% (0 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;250ms&lt;/td&gt;
          &lt;td&gt;39.00% (3975 of 10000)&lt;/td&gt;
          &lt;td&gt;31.00% (31 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;500ms&lt;/td&gt;
          &lt;td&gt;50.00% (5000 of 10000)&lt;/td&gt;
          &lt;td&gt;70.00% (70 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;1000ms&lt;/td&gt;
          &lt;td&gt;59.00% (5984 of 10000)&lt;/td&gt;
          &lt;td&gt;79.00% (79 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2500ms&lt;/td&gt;
          &lt;td&gt;79.00% (7996 of 10000)&lt;/td&gt;
          &lt;td&gt;80.00% (80 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;5000ms&lt;/td&gt;
          &lt;td&gt;80.00% (8000 of 10000)&lt;/td&gt;
          &lt;td&gt;80.00% (80 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;10000ms&lt;/td&gt;
          &lt;td&gt;80.00% (8000 of 10000)&lt;/td&gt;
          &lt;td&gt;99.00% (99 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;20000ms&lt;/td&gt;
          &lt;td&gt;80.00% (8000 of 10000)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;30000ms&lt;/td&gt;
          &lt;td&gt;99.00% (9999 of 10000)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;40000ms&lt;/td&gt;
          &lt;td&gt;100.00% (10000 of 10000)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;50000ms&lt;/td&gt;
          &lt;td&gt;100.00% (10000 of 10000)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;60000ms&lt;/td&gt;
          &lt;td&gt;100.00% (10000 of 10000)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;Queries with `LIMIT 1000`&lt;/summary&gt;
&lt;div&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;Time bucket&lt;/th&gt;
          &lt;th&gt;Percentage of queries (before)&lt;/th&gt;
          &lt;th&gt;Percentage of queries (after splitting)&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;50ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 904)&lt;/td&gt;
          &lt;td&gt;0% (0 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;100ms&lt;/td&gt;
          &lt;td&gt;0% (1 of 904)&lt;/td&gt;
          &lt;td&gt;0% (0 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;250ms&lt;/td&gt;
          &lt;td&gt;12.00% (114 of 904)&lt;/td&gt;
          &lt;td&gt;0% (0 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;500ms&lt;/td&gt;
          &lt;td&gt;30.00% (276 of 904)&lt;/td&gt;
          &lt;td&gt;21.00% (21 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;1000ms&lt;/td&gt;
          &lt;td&gt;55.00% (499 of 904)&lt;/td&gt;
          &lt;td&gt;41.00% (41 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2500ms&lt;/td&gt;
          &lt;td&gt;77.00% (700 of 904)&lt;/td&gt;
          &lt;td&gt;64.00% (64 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;5000ms&lt;/td&gt;
          &lt;td&gt;77.00% (704 of 904)&lt;/td&gt;
          &lt;td&gt;77.00% (77 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;10000ms&lt;/td&gt;
          &lt;td&gt;77.00% (704 of 904)&lt;/td&gt;
          &lt;td&gt;98.00% (98 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;20000ms&lt;/td&gt;
          &lt;td&gt;77.00% (704 of 904)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;30000ms&lt;/td&gt;
          &lt;td&gt;88.00% (804 of 904)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;40000ms&lt;/td&gt;
          &lt;td&gt;99.00% (901 of 904)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;50000ms&lt;/td&gt;
          &lt;td&gt;99.00% (903 of 904)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;60000ms&lt;/td&gt;
          &lt;td&gt;100.00% (904 of 904)&lt;/td&gt;
          &lt;td&gt;100.00% (100 of 100)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;Queries with no limit`&lt;/summary&gt;
&lt;div&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;Time bucket&lt;/th&gt;
          &lt;th&gt;Percentage of queries (before)&lt;/th&gt;
          &lt;th&gt;Percentage of queries (after splitting)&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;50ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;0% (0 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;100ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;0% (0 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;250ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;0% (0 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;500ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;0% (0 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;1000ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;0% (0 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2500ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;0% (0 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;5000ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;0% (0 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;10000ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;0% (0 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;20000ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;4.00% (2 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;30000ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;16.00% (8 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;40000ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;16.00% (8 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;50000ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;18.00% (9 of 50)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;60000ms&lt;/td&gt;
          &lt;td&gt;0% (0 of 28)&lt;/td&gt;
          &lt;td&gt;18.00% (9 of 50)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;h2 id=&quot;postgres-in-docker-vs-native-postgres&quot;&gt;Postgres-in-Docker vs. native Postgres&lt;/h2&gt;

&lt;p&gt;&lt;small&gt;Addition made Feb 20, 2021&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;In our original article we did not clarify the performance impacts of running Postgres inside of Docker with a volume bind mount. This was raised as a potential source of IO performance difference to us by &lt;a href=&quot;https://twitter.com/thorstenball&quot;&gt;Thorsten Ball&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We ran all tests above with Postgres in Docker, using a volume bind mount (the osxfs driver, not the experimental FUSE gRPC driver.)&lt;/p&gt;

&lt;p&gt;We additionally ran the same table-splitting benchmarks on a native Postgres server (&lt;a href=&quot;https://github.com/hexops/pgtrgm_emperical_measurements#native-postgres-tests&quot;&gt;reproduction steps here&lt;/a&gt;) and found the following key changes:&lt;/p&gt;

&lt;h3 id=&quot;cpu-usage--memory-usage-approximately-the-same&quot;&gt;CPU usage &amp;amp; memory usage: approximately the same&lt;/h3&gt;

&lt;p&gt;CPU and memory usage was approximately the same as in our Docker Postgres tests.&lt;/p&gt;

&lt;p&gt;We anticipated this would be the case as the Macbook does have VT-x virtualization enabled (default on all i7/i9 Macbooks, and confirmed through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysctl kern.hv_support&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;indexing-speed-was-88-faster&quot;&gt;Indexing speed was ~88% faster&lt;/h3&gt;

&lt;p&gt;Running the statements to split up the large table into multiple smaller ones, i.e.:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files_000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files_001&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Was much faster in native Postgres, taking about 2-8s for each table instead of 20-40s previously, and taking only 15m in total instead of 2h before.&lt;/p&gt;

&lt;p&gt;Parallel creation of the Trigram indexes using e.g.:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files_000_contents_trgm_idx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin_trgm_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Was also much faster, taking only 23m compared to ~3h with Docker.&lt;/p&gt;

&lt;h3 id=&quot;query-performance-is-12-99-faster-depending-on-query&quot;&gt;Query performance is 12-99% faster, depending on query&lt;/h3&gt;

&lt;p&gt;We re-ran the same 350 queries as in our earlier table-splitting benchmark, and found the following substantial improvements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Queries that were previously very slow noticed a ~12% improvement. This is likely due to IO operations needed when interfacing with the 200 separate tables.&lt;/li&gt;
  &lt;li&gt;Queries that were previously in the middle-ground noticed meager ~5% improvements.&lt;/li&gt;
  &lt;li&gt;Queries that were previously fairly fast (likely searching only over a one or two tables before returning) noticed substantial 16-99% improvements.&lt;/li&gt;
&lt;/ol&gt;

&lt;details&gt;
&lt;summary&gt;Exhaustive comparison details (negative change is good)&lt;/summary&gt;
&lt;div&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;Change&lt;/th&gt;
          &lt;th&gt;Time bucket&lt;/th&gt;
          &lt;th&gt;Queries under bucket &lt;strong&gt;before&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;Queries under bucket &lt;strong&gt;after&lt;/strong&gt;&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;0%&lt;/td&gt;
          &lt;td&gt;500s&lt;/td&gt;
          &lt;td&gt;350 of 350&lt;/td&gt;
          &lt;td&gt;350 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-12%&lt;/td&gt;
          &lt;td&gt;100s&lt;/td&gt;
          &lt;td&gt;309 of 350&lt;/td&gt;
          &lt;td&gt;350 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-12%&lt;/td&gt;
          &lt;td&gt;50s&lt;/td&gt;
          &lt;td&gt;309 of 350&lt;/td&gt;
          &lt;td&gt;350 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-12%&lt;/td&gt;
          &lt;td&gt;40s&lt;/td&gt;
          &lt;td&gt;308 of 350&lt;/td&gt;
          &lt;td&gt;350 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-12%&lt;/td&gt;
          &lt;td&gt;30s&lt;/td&gt;
          &lt;td&gt;308 of 350&lt;/td&gt;
          &lt;td&gt;349 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-7%&lt;/td&gt;
          &lt;td&gt;25s&lt;/td&gt;
          &lt;td&gt;307 of 350&lt;/td&gt;
          &lt;td&gt;330 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-7%&lt;/td&gt;
          &lt;td&gt;25s&lt;/td&gt;
          &lt;td&gt;307 of 350&lt;/td&gt;
          &lt;td&gt;330 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-8%&lt;/td&gt;
          &lt;td&gt;20s&lt;/td&gt;
          &lt;td&gt;302 of 350&lt;/td&gt;
          &lt;td&gt;330 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-8%&lt;/td&gt;
          &lt;td&gt;20s&lt;/td&gt;
          &lt;td&gt;302 of 350&lt;/td&gt;
          &lt;td&gt;330 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-5%&lt;/td&gt;
          &lt;td&gt;10s&lt;/td&gt;
          &lt;td&gt;297 of 350&lt;/td&gt;
          &lt;td&gt;311 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-26%&lt;/td&gt;
          &lt;td&gt;5s&lt;/td&gt;
          &lt;td&gt;237 of 350&lt;/td&gt;
          &lt;td&gt;319 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-7%&lt;/td&gt;
          &lt;td&gt;2500ms&lt;/td&gt;
          &lt;td&gt;224 of 350&lt;/td&gt;
          &lt;td&gt;240 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-9%&lt;/td&gt;
          &lt;td&gt;2000ms&lt;/td&gt;
          &lt;td&gt;219 of 350&lt;/td&gt;
          &lt;td&gt;240 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-9%&lt;/td&gt;
          &lt;td&gt;1500ms&lt;/td&gt;
          &lt;td&gt;219 of 350&lt;/td&gt;
          &lt;td&gt;240 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-16%&lt;/td&gt;
          &lt;td&gt;1000ms&lt;/td&gt;
          &lt;td&gt;200 of 350&lt;/td&gt;
          &lt;td&gt;237 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-14%&lt;/td&gt;
          &lt;td&gt;750ms&lt;/td&gt;
          &lt;td&gt;190 of 350&lt;/td&gt;
          &lt;td&gt;221 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-23%&lt;/td&gt;
          &lt;td&gt;500ms&lt;/td&gt;
          &lt;td&gt;170 of 350&lt;/td&gt;
          &lt;td&gt;220 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-59%&lt;/td&gt;
          &lt;td&gt;250ms&lt;/td&gt;
          &lt;td&gt;88 of 350&lt;/td&gt;
          &lt;td&gt;217 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-99%&lt;/td&gt;
          &lt;td&gt;100ms&lt;/td&gt;
          &lt;td&gt;1 of 350&lt;/td&gt;
          &lt;td&gt;168 of 350&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-99%&lt;/td&gt;
          &lt;td&gt;50ms&lt;/td&gt;
          &lt;td&gt;1 of 350&lt;/td&gt;
          &lt;td&gt;168 of 350&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;We think the following learnings are most important:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; directories, even with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--depth=1&lt;/code&gt; clones, account for 30% of a repositories size on disk (at least in top 10,000 GitHub repositories.)&lt;/li&gt;
  &lt;li&gt;Files &amp;gt; 1 MiB (often binaries) account for another 51% of the data size on disk of repositories.&lt;/li&gt;
  &lt;li&gt;On only a Macbook Pro, it is possible to get Postgres Trigram regex search over 10,000 repositories to run most reasonable queries in under 5s - and certainly much faster with more hardware.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_trgm&lt;/code&gt; performs single-threaded indexing and querying, unless you split your data up into multiple tables.&lt;/li&gt;
  &lt;li&gt;By default, a Postgres &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt; colum will be compressed by Postgres on disk out of the box - resulting in a 23% reduction in size (with the files we inserted.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_trgm&lt;/code&gt; GIN indexes take around 26% the size of your data on disk. So if indexing 1 GiB of raw text, expect Postgres to store that text in around ~827 MiB plus 279 MiB for the GIN trigram index.&lt;/li&gt;
  &lt;li&gt;Splitting your data into multiple tables if using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_trgm&lt;/code&gt; is an obvious win, as it allows for paralle indexing which can be the difference between 4h vs 22h. It also reduces the risk of an indexing failure after 22h due to e.g. lack of memory and uses much less peak memory overall.&lt;/li&gt;
  &lt;li&gt;Docker bind mounts (not volumes) are quite slow outside of Linux host environments (there are many other articles on this subject.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are looking for fast regexp or code search today, consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourcegraph.com&quot;&gt;Sourcegraph&lt;/a&gt; (disclaimer: the author works here, but this article is not endorsed or affiliated in any way)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/zoekt&quot;&gt;Zoekt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;Ripgrep&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow this devlog for updates as we continue investigating faster ways to do regexp &amp;amp; ngram search at large scales.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="search," />
      
        <category term="trigrams" />
      

      

      
        <summary type="html">In this article, we share empirical measurements from our experiments in using Postgres to index and search over 10,000 top GitHub repositories using pg_trgm on only a Macbook.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Postgres Trigram search learnings</title>
      
      
      <link href="/2021/postgres-trigram-search-learnings" rel="alternate" type="text/html" title="Postgres Trigram search learnings" />
      
      <published>2021-01-26T00:00:00+00:00</published>
      <updated>2021-01-26T00:00:00+00:00</updated>
      <id>/2021/postgres-trigram-search-learnings</id>
      <content type="html" xml:base="/2021/postgres-trigram-search-learnings">&lt;p&gt;In this article I talk about learnings I have from trying to use pg_trgm as the backend for a search engine, Tridex, which aims to be a competitor to Google’s &lt;a href=&quot;https://github.com/google/zoekt&quot;&gt;Zoekt&lt;/a&gt; (“Fast trigram based code search”)&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I work @ &lt;a href=&quot;https://sourcegraph.com&quot;&gt;Sourcegraph&lt;/a&gt;, which provides code search, code intelligence, and other developer tooling. (If you’re one of my Sourcegraph co-workers, hey! Hexops is the name of my GitHub organization for after-hours experiments and what I hope will one day in the distant future become a successful game development company.)&lt;/p&gt;

&lt;p&gt;Over the past ~8 months I have been exploring the intersection between game development and my work at Sourcegraph, and finding interesting overlap between the two. I have been working on a competitor to Google’s &lt;a href=&quot;https://github.com/google/zoekt&quot;&gt;zoekt&lt;/a&gt; (“Fast trigram based code search”), which is one of the search backends used by Sourcegraph with a few goals in mind:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Produce a search backend I can use for Hexops, to provide search functionality for a user-voice type platform (think GitHub issues, but with duplicate issue removal and upvote/downvote capability), and other social-network type features in games I hope to one day create. i.e. not just code search&lt;/li&gt;
  &lt;li&gt;Learn more about search in hopes of being able to bring some of those learnings to Sourcegraph (I really want our commit/diff search to be indexed, and wish we could index more things in general.) It would also be cool to solve the ominous and difficult &lt;a href=&quot;https://github.com/google/zoekt/issues/86&quot;&gt;Zoekt memory usage problem&lt;/a&gt; we have had at Sourcegraph for as long as I can remember.&lt;/li&gt;
  &lt;li&gt;Provide a foundation for more bleeding-edge “here’s a whacky idea” type experiments that are cool surrounding developer tools, but that are not necessarily guaranteed wins / anything I could reasonable pitch elsewhere.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;indexing-every-character-is-different-than-regular-fts&quot;&gt;Indexing every character is different than regular FTS&lt;/h2&gt;

&lt;p&gt;First, it’s important to note that my usage of pg_trgm is not the same as general FTS (Full Text Search) usage of pg_trgm in general. My usage (and the use case of code search) cares about every character being indexed, and being able to do regex searches - this is different than traditional FTS where only words matter.&lt;/p&gt;

&lt;h2 id=&quot;pg_trgm-indexes-apply-to-all-data-in-that-column&quot;&gt;pg_trgm indexes apply to all data in that column&lt;/h2&gt;

&lt;p&gt;This sounds obvious, but in practice has interesting/weird implications when trying to build a code search engine like Zoekt.&lt;/p&gt;

&lt;p&gt;For example, Zoekt builds indexes of repositories code in chunks (from what I understand) and then concurrently, in an unordered fashion, searches those repository code chunks (inverted trigram indexes). This plays a key role in the strategy of pagination that Zoekt implements: you can search over those chunks and give up searching further chunks after you’ve found enough results.&lt;/p&gt;

&lt;p&gt;With pg_trgm, a naive approach would be to have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_contents&lt;/code&gt; column with a pg_trgm GIN index over it, and put every file from every repository into that column. But that index would apply to &lt;em&gt;all&lt;/em&gt; file contents across every repository, so when you want to LIMIT search over that column you are searching over one giant trigram GIN index instead of many smaller ones. It’s faster if your aim is to search the entire index, but if your aim is “get enough results and then get out” it’s much slower, because you have to deal with the entire index instead of multiple smaller indexes. But, I have not tested this empirically - so take this statement with a grain or two of salt. It’s possible I am wrong here.&lt;/p&gt;

&lt;p&gt;There is an obvious way to counteract this effect, though: use one pg_trgm GIN index (i.e. a distinct table or column) per repository. You now have a distinct GIN trigram index per repository chunk. Of course, when there are thousands of repositories this introduces major complexity in schema management, query execution, etc. as you might imagine having thousands of tables/columns not exactly being great either.&lt;/p&gt;

&lt;p&gt;It is possible that Postgres’ &lt;a href=&quot;https://www.postgresql.org/docs/10/ddl-partitioning.html&quot;&gt;table data partitioning&lt;/a&gt; could interoperate with pg_trgm nicely to solve this problem, but I didn’t explore this in-depth and found no information on the subject. Importantly, you would need to partition tables based on repository (or better, file-size-based chunks.) It is worth exploring this approach more.&lt;/p&gt;

&lt;h2 id=&quot;naive-usage-of-pg_trgm-is-competitive&quot;&gt;Naive usage of pg_trgm is competitive!&lt;/h2&gt;

&lt;p&gt;The good news is that even with the naive approach previously described, pg_trgm turns out to be approximately competitive with Zoekt, I assume due to it using a GIN index for trigram matching instead of an inverted index like Zoekt:&lt;/p&gt;

&lt;p&gt;I don’t have empirical measurements of this that I can share, you’ll just have to take my word for it, but approximately on a 2020 Macbook pro with several thousand source code repositories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Query time performance is roughly the same for needle-in-the-haystack and haystack-full-of-needles queries over all repositories file contents.&lt;/li&gt;
  &lt;li&gt;Pagination can be quite slow towards the tail end of the table, each subset being fetched requires a full search of the index to find the results at the end of the table. A streaming approach rather than traditional SQL pagination would be ideal.&lt;/li&gt;
  &lt;li&gt;On-disk data size is quite small compared to Zoekt’s, Postgres trigram GIN indexes appear to be quite small and its on-by-default data compression works really well with text.&lt;/li&gt;
  &lt;li&gt;Postgres uses MUCH less memory than Zoekt. Like several orders of magnitude less.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interestingly, however, Postgres uses MUCH less memory. The choice of using an inverted trigram index in Zoekt, &lt;a href=&quot;https://github.com/google/zoekt/issues/86&quot;&gt;as I understand it&lt;/a&gt;, is also one of the reasons that its memory usage is so large (among other things, like Go being fairly relaxed about returning memory to the OS.) I also suggest reading &lt;a href=&quot;https://news.ycombinator.com/item?id=18584294&quot;&gt;these Hacker News comments from 2018&lt;/a&gt; and the linked article from Russ Cox about Google Code Search, from which Zoekt was ultimately born.&lt;/p&gt;

&lt;h2 id=&quot;horizontally-scaling-pg_trgm-is-hard&quot;&gt;Horizontally scaling pg_trgm is hard&lt;/h2&gt;

&lt;p&gt;Once your data no longer fits into a single machine / Postgres instance, things get tricky. How do you scale pg_trgm across multiple machines?&lt;/p&gt;

&lt;p&gt;Postgres &lt;a href=&quot;https://www.postgresql.org/docs/current/high-availability.html&quot;&gt;supports a nauseating amount of complex High Availability deployment options&lt;/a&gt; for scaling horizontally, and ideally for a search engine you would want something like data partitioning where data is split across multiple hosts but also with the possibility of replication across multiple hosts (for the event a host goes down.)&lt;/p&gt;

&lt;p&gt;One of the options it supports is horizontal data partitioning through splitting tables into multiple smaller tables, and then using a foreign data wrapper (postgres_fdw) to execute queries that access all of those tables across the network. This is described in a bit more depth &lt;a href=&quot;https://www.highgo.ca/2019/08/08/horizontal-scalability-with-sharding-in-postgresql-where-it-is-going-part-2-of-3/&quot;&gt;in this blog post&lt;/a&gt;. This could be a good approach, but I decided not to explore this option further.&lt;/p&gt;

&lt;p&gt;Ultimately I decided to go with a multiple-table approach, with each table representing a type of data (e.g. repository code) and performing horizontal sharding and scaling at the application layer outside of the DB entirely. I will explain why I took this approach in the next section.&lt;/p&gt;

&lt;h2 id=&quot;deploying-and-tuning-postgres-configuration-is-hard&quot;&gt;Deploying and tuning Postgres configuration is hard&lt;/h2&gt;

&lt;p&gt;In stark contrast to Zoekt, which uses a ridiculous amount of memory, with Postgres I was left with a different problem: I could not get it to use all available memory/CPU to perform search queries faster.&lt;/p&gt;

&lt;p&gt;Raising &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shared_buffers = 128MB&lt;/code&gt; (default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32MB&lt;/code&gt;) helped a fair amount, but still a similar issue. Ultimately I believe the majority of query time is spent not on CPU latency, but rather a combination of RAM lookups / L3 cache misses and IO latency.&lt;/p&gt;

&lt;p&gt;Nonetheless, this introduced a new problem for me: I wanted this search engine to be as simple to deploy as possible, and the idea of having Postgres tuning being a requirement did not appeal to me. I have also seen in the field how many use Amazon RDS, which does not allow for tuning (and is often a several-years-outdated Postgres version anyway.)&lt;/p&gt;

&lt;p&gt;With all of this in mind, I ended up going with deploying Docker containers with my own Postgres binary and configuration built-in and managing Postgres on behalf of the user. This ended up being interesting for other reasons I won’t get into (think automatic zero-downtime upgrades from Postgres 12 -&amp;gt; 13.)&lt;/p&gt;

&lt;h2 id=&quot;ultra-large-scales&quot;&gt;Ultra large scales&lt;/h2&gt;

&lt;p&gt;Although using pg_trgm is competitive (much better than?) Zoekt - it’s still not enough to be able to efficiently scale up to a massive scale such as Google. The index is still relatively large (in the hundreds of MB for thousands of repositories) well outside the bounds of CPU caches and that makes it kind of slow at truly large scales where the index grows near-linearly.&lt;/p&gt;

&lt;p&gt;Ultimately.. Once you add in deployment pains, configuration tuning, trigram index splitting, horizontal scaling, etc. it’s a lot less like using Postgres to build a search engine - and a lot more like using Postgres as a trigram index provider. It’s interesting, and works, but there may be better options.&lt;/p&gt;

&lt;h2 id=&quot;future-exploration&quot;&gt;Future exploration&lt;/h2&gt;

&lt;p&gt;A more fruitful direction may be to explore effectively the same architecture (i.e. roll-your-own-search-engine), but replacing pg_trgm and Postgres entirely with a custom ngram index built on top of the bloom-filter successor which is more L3-cache-friendly, &lt;a href=&quot;https://lemire.me/blog/2019/12/19/xor-filters-faster-and-smaller-than-bloom-filters/&quot;&gt;xor filters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I believe with this approach you could achieve scales/performance similar to Google, Bing, etc. while providing full regex search and more. This idea is not completely unfounded, it has been &lt;a href=&quot;https://github.com/BurntSushi/ripgrep/issues/1518&quot;&gt;suggested for indexing in ripgrep, for example&lt;/a&gt; (although &lt;a href=&quot;https://github.com/BurntSushi/ripgrep/issues/1497&quot;&gt;it appears they’ll be going with an inverted trigram index similar to Zoekt&lt;/a&gt; instead.)&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;In Tridex (the search engine I am working on), we’re planning on exploring this avenue by replacing Postgres and pg_trgm with a custom trigram index based on xor-filters, and will likely write it in Zig. I only realized the opportunity here in a late-night conversation with a coworker who has an affinity for bloom filters, so perhaps I am misguided and this will turn up no fruit.&lt;/p&gt;

&lt;p&gt;Follow this devlog for updates.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Stephen Gutekanst</name>
          
          
        </author>
      

      
        <category term="search," />
      
        <category term="trigrams" />
      

      

      
        <summary type="html">In this article I talk about learnings I have from trying to use pg_trgm as the backend for a search engine, Tridex, which aims to be a competitor to Google’s Zoekt (“Fast trigram based code search”)</summary>
      

      
      
    </entry>
  
  
</feed>
